{
  "single-sign-on_2025-03-07T12:20:27.984Z": {
    "query": "single-sign-on",
    "timestamp": "2025-03-07T12:20:27.984Z",
    "categoryResults": [
      {
        "category": "Official",
        "description": "Official standards and specifications sources",
        "domains": [
          "tools.ietf.org",
          "datatracker.ietf.org",
          "rfc-editor.org",
          "w3.org",
          "iso.org"
        ],
        "results": [
          {
            "id": "https://www.iso.org/information-security/identity-management",
            "title": "Identity management: What you need to know",
            "url": "https://www.iso.org/information-security/identity-management",
            "publishedDate": "2024-09-03T00:00:00.000Z",
            "author": "",
            "text": "Modern-day security breaches like the SolarWinds or T-Mobile attacks are not one-off events; they are prime examples of how someone can steal your organization’s credentials and use them to gain illegitimate privileged access to sensitive assets. Data breaches happen daily , and in too many places at once to keep count. They remind us that, regardless of our information security investments, business-critical resources can be compromised if access is not protected. \n Organizations depend on a variety of systems, applications and devices to run their operations, and users require access to these resources to do their jobs efficiently. Managing this can be a challenge, especially in large corporations with hundreds or thousands of users requiring personalized access. Identity and access management adds a layer of security by tracking, managing and securing the identities of individuals and their associated data. It helps keep track of who is who, so that people can access the information they are authorized to see and make the transactions they are permitted to make. \n \n Table of contents \n Enable Javascript to view table \n \n What is identity management? \n Identity management is the process of managing user identities and access privileges in a centralized way. It involves recording and controlling identities within an organization and enforcing identity governance policies. Simply put, your online identity is the profile that identifies who you are when using a network, whereas your access refers to what permissions you have once you’re logged in. Together, they form an important part of how you interact with technology – it’s how computers know it’s really you attempting to log in instead of someone else. Identity management in action \n Through identity and access management (IAM), only specified users in an organization are allowed to access and handle sensitive information. Here are a few examples of identity management at work: \n \n Identity creation and maintenance : By creating automated workflows for scenarios like a new hire or a role transition, IAM centralizes the identity and access management life cycle of a company’s employees. This improves processing time for access and identity changes and reduces errors. \n Entitlement management : Life-cycle entitlements are assigned to individuals and their roles. For example, a production operator is able to view an online work procedure but may not be allowed to modify it. On the other hand, a supervisor will have the authority not only to view but to modify the file or create new ones. \n Identity proofing : Identity is at the core of a citizen’s everyday actions. Once the state has implemented a civil register, IAM enables governments to grant people the right to access their data (birth certificate, driver’s licence, etc.) and prove their identity. \n \n A number of identity and access management systems use role-based access control (RBAC). Under this approach, there are predefined job roles with specific sets of access privileges. For instance, if an HR employee is put in charge of training, it makes little sense to also give them access to pay role and salary files. There are many other forms of automatic access control that each come with a variety of features and technology. \n Sign up for email updates \n Register for additional resources and updates on IT and related technologies! \n Common features of identity management \n Many different forms of identity management software exist on the market and there is no official definition of what they must and must not include. However, a couple of essential features stand out: \n \n Single sign-on (SSO) : This is when users can access multiple applications and services from a single location, avoiding the need for different usernames and passwords. \n Two-factor authentication : This involves verifying someone’s identity not just with their username and password, but also with another piece of information like a PIN or a token. \n \n Other features of identity management may include automatic provisioning of user accounts, password management, workflow, and compliance and audit services. In recent years, a new generation of identity management technologies has emerged, which focuses on ease of use in addition to security . Some examples are biometric authentication (such as fingerprints or facial recognition), multi-factor authentication (requiring several verification factors), and identity federation, whereby the responsibility for an individual’s or entity’s authentication is delegated to a trusted external party. SSO is an important aspect of federated ID management. \n These key features of identity management are shared by nearly all of today’s identity management systems (IMS). An IMS is an online platform that helps organizations manage a range of identities in a secure and efficient manner. It integrates with various other systems within an organization, such as HR systems, e-commerce platforms and accounting software. How does identity management work? \n Broadly speaking, identity management systems perform three main tasks: identification , authentication and authorization . This enables the right people, depending on their job functions, to access the tools they need to perform their assigned duties – without granting them access to those they don’t need. \n Identity and access – what’s the difference? The terms “identity management” and “access management” are often used interchangeably, but they are two distinct concepts. The crucial difference is that identity management deals with user accounts (authentication) while access management deals with permissions and privileges (authorization). \n Let’s take an example. When a user enters their login credentials, their identity is being checked against a database to verify if the entered credentials match the ones stored in the database – this is authentication. Once the user’s identity has been established, they are then granted access to the resources their account is cleared for – that’s authorization. Identity management: what’s in it for you? \n An identity management system is a valuable tool for protecting the information and resources of organizations of any size. It allows you to securely store user data and manage user access privileges, providing a secure and reliable way to keep your operations running smoothly. \n The benefits of identity management include the following: \n \n Increased security : An IMS helps protect your organization from unauthorized access and theft of user data. \n Improved efficiency : With an IMS, you can efficiently manage user login procedures and track user activity across multiple platforms using a single set of credentials. \n Reduced processing time/cost : An IMS’s automated workflows allow you to easily manage and administer user accounts, saving time and money on administrative tasks. \n Enhanced compliance : With an IMS, you can easily ensure compliance with regulations and standards, such as GDPR and HIPAA (see below). \n Deploying an identity management system \n The implementation of a sound identity management solution does not guarantee complete security, but adopting the following principles can make you less vulnerable to breaches and attacks from malicious actors. Here are a few tips to consider: \n \n Implement strong authentication methods (such as multi-factor authentication) to reduce the risk of unauthorized access. \n Regularly review access control policies to ensure that only authorized users have access to sensitive information and resources. \n Monitor and audit access to sensitive information and resources to detect and prevent unauthorized access. \n Frequently update user accounts to ensure they remain relevant and accurate. \n Implement a password management solution to reduce the risk of password-related security incidents, such as password reuse or password theft. \n What it means for compliance \n If identity and access management processes are not effectively controlled, you may be in non-compliance with industry standards or government regulations. The world is moving towards stricter regulations and standards for identity management – such as the European GDPR (which requires explicit consent from users for data collection) and the NIST 800-63 Digital Identity Guidelines in the US (a roadmap for IAM best practices). \n Several protocols exist to support strong IAM policies by securing data and ensuring its integrity during transfer . Generally known as “Authentication, Authorization, Accounting”, or AAA, these identity and access management protocols provide security standards to simplify access management, aid compliance and create a uniform system for managing interactions between users and systems. \n Although ISO compliance is not a legal requirement, ISO standards naturally align with the regulations of various sector. So complying with ISO/IEC 27001 for information security can prevent your organization from getting into legal trouble over crucial aspects of identity management. Based around segregation of duty and a “one user, one ID” policy, it demonstrates that your corporate information is appropriately controlled. ISO/IEC 27001 Information security management systems ISO/IEC 24760-1 IT security and privacy — A framework for identity management ISO/IEC 27018 Protection of personally identifiable information (PII) in public clouds acting as PII processors Towards advanced identity management \n Complex compliance and security requirements are putting organizations under pressure more than ever before to protect their information, and challenge conventional ways of managing users’ identities. Half a decade ago, passwords were as close as you would get to a digital identity. But modern approaches to authentication require more than just a password. The widespread adoption of cloud computing, whose scalability and flexibility make it an attractive proposition for most organizations, has placed a new layer of stress on information security. \n Today, passwordless logins using biometrics or multi-factor authentication provide an alternative to traditional authentication – but that’s not enough. When it comes to securing data in multi-cloud environments, IT professionals view encryption as a critical security control. Storing identities on a blockchain has emerged as a solution that can provide immutable records of a given system without a centralized authority to manage them. As we contemplate our IAM future, it may not be long before blockchain-based identity systems become the norm for keeping a user’s data safe and secure.",
            "summary": "Single sign-on (SSO) is a common feature of identity management software that allows users to access multiple applications with one set of credentials.  This is explained as a key feature in the article \"Identity management: What you need to know\".  The article further details how identity management systems manage user identities and access privileges centrally, improving security and efficiency.\n",
            "image": "https://www.iso.org/files/live/sites/isoorg/files/news/insights/information-security/Info%20sec_Identity%20management.png/thumbnails/1200x600",
            "favicon": "https://www.iso.org/modules/isoorg-template/img/iso/favicon/red/apple-touch-icon-152x152-precomposed.png",
            "categoryName": "Official",
            "categoryDescription": "Official standards and specifications sources",
            "evaluation": {
              "justification": "Highly relevant and very recent (2024), clearly explains SSO as a key feature of identity management.",
              "rating": 10
            }
          },
          {
            "id": "https://www.w3.org/community/fed-id/2022/04/21/introduction-to-federated-identity-and-the-fedid-cg/",
            "title": "Introduction to Federated Identity and the FedID CG",
            "url": "https://www.w3.org/community/fed-id/2022/04/21/introduction-to-federated-identity-and-the-fedid-cg/",
            "publishedDate": "2022-04-21T00:00:00.000Z",
            "author": "Heather Flanagan |",
            "text": "The audience for this post is people who are unfamiliar with how privacy concerns may impact federated identity. That likely includes people from one of two groups: 1) people who are interested in privacy, but are new to the concept of federated identity, or 2) people who are familiar with federated identity, but are unaware of the changes being made to browsers because of the privacy concerns. The goal of the post is to provide an introduction to federated identity and why it matters, what the privacy changes are and their potential impact, and then describe how FedID CG is working to preserve federated identity in light of the privacy-related changes. \n Federated Identity encompasses the technologies, standards, and use cases in which the user identification and user authentication services are separated from the service providing the resource a user is trying to access. The organizations providing the user identification/authentication services are generally referred to as Identity Providers, and the organizations that utilize their services are often referred to as Relying Parties. Federated identity makes it possible for a website, app, and/or API to outsource authentication to an external entity. In practice, users with an account with entity A can gain access to web apps B and C without having to create new usernames and passwords, if B and C outsource authentication. Sometimes referred to as Single Sign-On, or SSO, there is a distinction to be made between SSO and federated identity. SSO is a property of federated identity that makes it possible for a user to gain access to distinct web apps or API without having to reenter credentials. The broader use of federated identity is when the resources involved are located in different security domains and are owned by different organizations. \n The types of organizations that use federated identity are as varied as the internet. It’s a common practice to use federated identity to streamline account management and access by allowing users to log in with an identity provider account (those “Log in with Facebook”, “Log in with Google”, “Log in with …” buttons.). It’s also commonly used by businesses to manage their employees’ access to company resources. Universities use federated identity to offer students multi-institutional academic programs, to provide shared access to educational resources, and for research collaboration. Federal institutions use federated identity to manage access to federal resources too – as do financial institutions. And for one final example, it’s also frequently used in Software-as-a-Service business models as well. \n Federated identity significantly reduces the burden on users by limiting account proliferation. It streamlines the user experience, lowers the security risks associated with password re-use (e.g., credential stuffing attacks), decreases the raw number of access credentials that a user has to remember and manage, and facilitates inter-organizational relationships and management. \n However, linking a user’s identity across systems also raises privacy concerns, especially when done across organizations/entities (and to a much lesser extent even when the resources are all owned by the same organization). While the objective of federated identity systems is to facilitate a user’s access to resources online, it was originally designed on top of web primitives (e.g. third-party cookies, top-level navigations, etc). These primitives can and are being abused to track users without their consent or full understanding. \n In response to these concerns, user-agents are making changes to how they work with some of the fundamental primitives of the web to prevent the uncontrolled, hidden tracking of users. Since federated identity often utilizes these same primitives to exchange necessary information to complete authentication flows, we need to develop solutions that address these privacy concerns without breaking federated identity. \n There are a variety of privacy-related interventions that user-agents are exploring. These include deprecating third-party cookies, controlling access to the client’s web storage, removing certain parameters from links (often referred to as link decoration), and restricting the capabilities of navigational redirects. Federated identity often relies on these same mechanisms, and so the changes being made to improve support for end-user privacy are having an effect on federated identity systems. Since the most immediate change is the deprecation of third-party cookies (having already been deployed in Safari and Firefox, and publicly planned for Chrome in late 2023), the Federated Identity Community Group (FedID CG) is currently focusing most of its attention on the impact of that change. The group is working to preserve federation when third-party cookies are deprecated. \n The FedID CG meets every week to provide feedback on the proposals that are relevant to federated identity. The full charter for the group can be found here . If you’re interested in learning more, we are currently working on a draft report that will be published shortly. If you’d like to participate in the group, you can join FedID CG here . Please note that while a W3C account is required to join, you do not need to be a member of the W3C. If you don’t have a W3C account, you can sign up for one on the W3C account request page .",
            "summary": "Single sign-on (SSO) is a feature of federated identity that allows users to access different web apps or APIs without re-entering credentials.  Federated identity, more broadly, separates user identification and authentication from the service being accessed, letting users log in with an existing account (like \"Log in with Google\") to access various resources.  While SSO streamlines access, it's important to note that federated identity's reliance on web primitives like cookies raises privacy concerns, leading to browser changes that impact how it functions.\n",
            "favicon": "https://www.w3.org/community/fed-id/wp-content/themes/StoryTeller/favicon.ico",
            "categoryName": "Official",
            "categoryDescription": "Official standards and specifications sources",
            "evaluation": {
              "justification": "Relevant and recent (2022), explains SSO within the context of federated identity, including privacy considerations.",
              "rating": 8
            }
          },
          {
            "id": "https://datatracker.ietf.org/doc/draft-biggs-acme-sso/",
            "title": "draft-biggs-acme-sso-01 - Automated Certificate ...",
            "url": "https://datatracker.ietf.org/doc/draft-biggs-acme-sso/",
            "publishedDate": "2021-04-08T00:00:00.000Z",
            "author": "",
            "text": "Abstract\n \n \nThis document specifies an extension to the ACME protocol [RFC8555]\nto enable ACME servers to validate a client's control of an email\nidentifier using single sign-on (SSO) technologies. An extension to\nthe CAA [RFC8659] resource record specification is also defined to\nprovide domain owners a means to declare a set of SSO providers that\nACME servers may rely upon when employing SSO for identifier\nvalidation on their domain.\n \n \nAuthors\n \n \n Andrew Biggs \n \n \n Richard Barnes \n \n \n Moynihan \n \n \n \n(Note: The e-mail addresses provided for the authors of this Internet-Draft may no longer be valid.)",
            "summary": "This document proposes an extension to the ACME (Automated Certificate Management Environment) protocol to use single sign-on (SSO) for verifying email ownership during certificate issuance.  It also suggests a CAA (Certification Authority Authorization) record extension allowing domain owners to specify which SSO providers ACME servers can use for this verification.\n",
            "favicon": "https://static.ietf.org/dt/12.37.0/ietf/images/ietf-logo-nor-32.png",
            "categoryName": "Official",
            "categoryDescription": "Official standards and specifications sources",
            "evaluation": {
              "justification": "Relevant and recent (2021), proposes an SSO extension to the ACME protocol.",
              "rating": 7
            }
          }
        ]
      },
      {
        "category": "Community",
        "description": "Community-driven platforms and forums",
        "domains": [
          "stackoverflow.com",
          "github.com",
          "wikipedia.org",
          "news.ycombinator.com"
        ],
        "results": [
          {
            "id": "https://en.wikipedia.org/wiki/Single_sign-on",
            "title": "Single sign-on",
            "url": "https://en.wikipedia.org/wiki/Single_sign-on",
            "publishedDate": "2024-06-05T07:13:50.000Z",
            "author": "Contributors to Wikimedia projects",
            "text": "From Wikipedia, the free encyclopedia \n \n Single sign-on ( SSO ) is an authentication scheme that allows a user to log in with a single ID to any of several related, yet independent, software systems.\n True single sign-on allows the user to log in once and access services without re-entering authentication factors.\n It should not be confused with same-sign on (Directory Server Authentication), often accomplished by using the Lightweight Directory Access Protocol (LDAP) and stored LDAP databases on (directory) servers. [1] [2] \n A simple version of single sign-on can be achieved over IP networks using cookies but only if the sites share a common DNS parent domain. [3] \n For clarity, a distinction is made between Directory Server Authentication (same-sign on) and single sign-on: Directory Server Authentication refers to systems requiring authentication for each application but using the same credentials from a directory server, whereas single sign-on refers to systems where a single authentication provides access to multiple applications by passing the authentication token seamlessly to configured applications.\n Conversely, single sign-off or single log-out ( SLO ) is the property whereby a single action of signing out terminates access to multiple software systems.\n As different applications and resources support different authentication mechanisms, single sign-on must internally store the credentials used for initial authentication and translate them to the credentials required for the different mechanisms.\n Other shared authentication schemes, such as OpenID and OpenID Connect , offer other services that may require users to make choices during a sign-on to a resource, but can be configured for single sign-on if those other services (such as user consent) are disabled. [4] An increasing number of federated social logons, like Facebook Connect , do require the user to enter consent choices upon first registration with a new resource, and so are not always single sign-on in the strictest sense.\n \n Benefits [ edit ] \n Benefits of using single sign-on include:\n \n Mitigate risk for access to 3rd-party sites (\"federated authentication\") [5] because user passwords are not stored or managed externally \n Reduce password fatigue from different username and password combinations \n Reduce time spent re-entering passwords for the same identity [5] \n Reduce IT costs due to lower number of IT help desk calls about passwords [6] \n Simpler administration. SSO-related tasks are performed transparently as part of normal maintenance, using the same tools that are used for other administrative tasks. \n Better administrative control. All network management information is stored in a single repository. This means that there is a single, authoritative listing of each user's rights and privileges. This allows the administrator to change a user's privileges and know that the results will propagate network wide. \n Improved user productivity. Users are no longer bogged down by multiple logons, nor are they required to remember multiple passwords in order to access network resources. This is also a benefit to Help desk personnel, who need to field fewer requests for forgotten passwords. \n Better network security. Eliminating multiple passwords also reduces a common source of security breaches—users writing down their passwords. Finally, because of the consolidation of network management information, the administrator can know with certainty that when he disables a user's account, the account is fully disabled. \n Consolidation of heterogeneous networks. By joining disparate networks, administrative efforts can be consolidated, ensuring that administrative best practices and corporate security policies are being consistently enforced. \n SSO shares centralized authentication servers that all other applications and systems use for authentication purposes and combines this with techniques to ensure that users do not have to actively enter their credentials more than once.\n \n Criticism [ edit ] \n The term reduced sign-on (RSO) has been used by some to reflect the fact that single sign-on is impractical in addressing the need for different levels of secure access in the enterprise, and as such more than one authentication server may be necessary. [7] \n As single sign-on provides access to many resources once the user is initially authenticated (\"keys to the castle\"), it increases the negative impact in case the credentials are available to other people and misused. Therefore, single sign-on requires an increased focus on the protection of the user credentials, and should ideally be combined with strong authentication methods like smart cards and one-time password tokens. [7] \n Single sign-on also increases dependence on highly-available authentication systems; a loss of their availability can result in denial of access to all systems unified under the SSO. SSO can be configured with session failover capabilities in order to maintain the system operation. [8] Nonetheless, the risk of system failure may make single sign-on undesirable for systems to which access must be guaranteed at all times, such as security or plant-floor systems.\n Furthermore, the use of single-sign-on techniques utilizing social networking services such as Facebook may render third party websites unusable within libraries, schools, or workplaces that block social media sites for productivity reasons. It can also cause difficulties in countries with active censorship regimes, such as China and its \" Golden Shield Project \", where the third party website may not be actively censored, but is effectively blocked if a user's social login is blocked. [9] [10] \n \n Security [ edit ] \n In March 2012, [11] a research paper reported an extensive study on the security of social login mechanisms. The authors found 8 serious logic flaws in high-profile ID providers and relying party websites, such as OpenID (including Google ID and PayPal Access), Facebook , Janrain , Freelancer , FarmVille , and Sears.com . Because the researchers informed ID providers and relying party websites prior to public announcement of the discovery of the flaws, the vulnerabilities were corrected, and there have been no security breaches reported. [12] \n In May 2014, a vulnerability named Covert Redirect was disclosed. [13] It was first reported \"Covert Redirect Vulnerability Related to OAuth 2.0 and OpenID\" by its discoverer Wang Jing, a Mathematical PhD student from Nanyang Technological University , Singapore. [14] [15] [16] In fact, almost all [ weasel words ] Single sign-on protocols are affected. Covert Redirect takes advantage of third-party clients susceptible to an XSS or Open Redirect. [17] \n In December 2020, flaws in federated authentication systems were discovered to have been utilized by attackers during the 2020 United States federal government data breach . [18] [19] \n Due to how single sign-on works, by sending a request to the logged-in website to get a SSO token and sending a request with the token to the logged-out website, the token cannot be protected with the HttpOnly cookie flag and thus can be stolen by an attacker if there is an XSS vulnerability on the logged-out website, in order to do session hijacking . Another security issue is that if the session used for SSO is stolen (which can be protected with the HttpOnly cookie flag unlike the SSO token), the attacker can access all the websites that are using the SSO system. [20] \n \n Privacy [ edit ] \n As originally implemented in Kerberos and SAML, single sign-on did not give users any choices about releasing their personal information to each new resource that the user visited. This worked well enough within a single enterprise, like MIT where Kerberos was invented, or major corporations where all of the resources were internal sites. However, as federated services like Active Directory Federation Services proliferated, the user's private information was sent out to affiliated sites not under control of the enterprise that collected the data from the user. Since privacy regulations are now tightening with legislation like the GDPR , the newer methods like OpenID Connect have started to become more attractive; for example MIT, the originator of Kerberos, now supports OpenID Connect . [21] \n \n Email address [ edit ] \n Single sign-on in theory can work without revealing identifying information such as email addresses to the relying party (credential consumer), but many credential providers do not allow users to configure what information is passed on to the credential consumer. As of 2019, Google and Facebook sign-in do not require users to share email addresses with the credential consumer. \" Sign in with Apple \" introduced in iOS 13 allows a user to request a unique relay email address each time the user signs up for a new service, thus reducing the likelihood of account linking by the credential consumer. [22] \n \n Common configurations [ edit ] \n Kerberos-based [ edit ] \n Initial sign-on prompts the user for credentials, and gets a Kerberos ticket-granting ticket (TGT). \n Additional software applications requiring authentication, such as email clients , wikis , and revision-control systems, use the ticket-granting ticket to acquire service tickets, proving the user's identity to the mail-server / wiki server / etc. without prompting the user to re-enter credentials. \n Windows environment - Windows login fetches TGT. Active Directory -aware applications fetch service tickets, so the user is not prompted to re-authenticate.\n Unix / Linux environment - Login via Kerberos PAM modules fetches TGT. Kerberized client applications such as Evolution , Firefox , and SVN use service tickets, so the user is not prompted to re-authenticate.\n \n Smart-card-based [ edit ] \n Initial sign-on prompts the user for the smart card . Additional software applications also use the smart card, without prompting the user to re-enter credentials. Smart-card-based single sign-on can either use certificates or passwords stored on the smart card.\n \n Integrated Windows Authentication [ edit ] \n Integrated Windows Authentication is a term associated with Microsoft products and refers to the SPNEGO , Kerberos , and NTLMSSP authentication protocols with respect to SSPI functionality introduced with Microsoft Windows 2000 and included with later Windows NT -based operating systems. The term is most commonly used to refer to the automatically authenticated connections between Microsoft Internet Information Services and Internet Explorer . Cross-platform Active Directory integration vendors have extended the Integrated Windows Authentication paradigm to Unix (including Mac) and Linux systems.\n \n Security Assertion Markup Language [ edit ] \n Security Assertion Markup Language (SAML) is an XML -based method for exchanging user security information between an SAML identity provider and a SAML service provider . SAML 2.0 supports W3C XML encryption and service-provider–initiated web browser single sign-on exchanges. [23] A user wielding a user agent (usually a web browser) is called the subject in SAML-based single sign-on. The user requests a web resource protected by a SAML service provider. The service provider, wishing to know the identity of the user, issues an authentication request to a SAML identity provider through the user agent. The identity provider is the one that provides the user credentials. The service provider trusts the user information from the identity provider to provide access to its services or resources.\n \n Emerging configurations [ edit ] \n Mobile devices as access credentials [ edit ] \n A newer variation of single-sign-on authentication has been developed using mobile devices as access credentials. Users' mobile devices can be used to automatically log them onto multiple systems, such as building-access-control systems and computer systems, through the use of authentication methods which include OpenID Connect and SAML, [24] in conjunction with an X.509 ITU-T cryptography certificate used to identify the mobile device to an access server.\n A mobile device is \"something you have\", as opposed to a password which is \"something you know\", or biometrics (fingerprint, retinal scan, facial recognition, etc.) which is \"something you are\". Security experts recommend using at least two out of these three factors ( multi-factor authentication ) for best protection.\n \n See also [ edit ] \n Account pre-hijacking \n Central Authentication Service \n Identity management \n Identity management systems \n List of single sign-on implementations \n Password manager \n Security Assertion Markup Language \n Usability of web authentication systems \n References [ edit ] \n \n ^ \"What's the Difference b/w SSO (Single Sign On) &amp; LDAP?\" . JumpCloud . 2019-05-14 . Retrieved 2020-10-27 . \n \n ^ \"SSO and LDAP Authentication\" . Authenticationworld.com. Archived from the original on 2014-05-23 . Retrieved 2014-05-23 . \n \n ^ \"OpenID versus Single-Sign-On Server\" . alleged.org.uk. 2007-08-13 . Retrieved 2014-05-23 . \n \n ^ \"OpenID Connect Provider - OpenID Connect Single Sign-On (SSO) - OIDC OAuth Authentication\" . OneLogin . \n \n ^ a b \"Single sign-on and federated authentication\" . kb.iu.edu . \n \n ^ \"Benefits of SSO\" . University of Guelph . Retrieved 2014-05-23 . \n \n ^ a b \"Single Sign On Authentication\" . Authenticationworld.com. Archived from the original on 2014-03-15 . Retrieved 2013-05-28 . \n \n ^ \"Sun GlassFish Enterprise Server v2.1.1 High Availability Administration Guide\" . Oracle.com . Retrieved 2013-05-28 . \n \n ^ Laurenson, Lydia (3 May 2014). \"The Censorship Effect\" . TechCrunch . Archived from the original on August 7, 2020 . Retrieved 27 February 2015 . \n \n ^ Chester, Ken (12 August 2013). \"Censorship, external authentication, and other social media lessons from China's Great Firewall\" . Tech in Asia . Archived from the original on March 26, 2014 . Retrieved 9 March 2016 . \n \n ^ Wang, Rui; Chen, Shuo; Wang, XiaoFeng (2012). \"Signing Me onto Your Accounts through Facebook and Google: A Traffic-Guided Security Study of Commercially Deployed Single-Sign-On Web Services\" . 2012 IEEE Symposium on Security and Privacy . pp. 365–379. doi : 10.1109/SP.2012.30 . ISBN 978-1-4673-1244-8 . S2CID 1679661 . \n \n ^ \"OpenID: Vulnerability report, Data confusion\" - OpenID Foundation, March 14, 2012 \n \n ^ \"Facebook, Google Users Threatened by New Security Flaw\" . Tom's Guide. 2 May 2014 . Retrieved 11 November 2014 . \n \n ^ \"Covert Redirect Vulnerability Related to OAuth 2.0 and OpenID\" . Tetraph. 1 May 2014 . Retrieved 10 November 2014 . \n \n ^ \"Math student detects OAuth, OpenID security vulnerability\" . Tech Xplore. 3 May 2014 . Retrieved 10 November 2014 . \n \n ^ \"Facebook, Google Users Threatened by New Security Flaw\" . Yahoo. 2 May 2014 . Retrieved 10 November 2014 . \n \n ^ \"Covert Redirect Flaw in OAuth is Not the Next Heartbleed\" . Symantec. 3 May 2014 . Retrieved 10 November 2014 . \n \n ^ \"VMware Flaw a Vector in SolarWinds Breach? — Krebs on Security\" . 19 December 2020. \n \n ^ Kovacs, Eduard (15 December 2020). \"Group Behind SolarWinds Hack Bypassed MFA to Access Emails at US Think Tank\" . Security Week . Retrieved 19 December 2020 . \n \n ^ \"What Is Session Hijacking?\" . 22 August 2019. \n \n ^ MIT IST. \"OpenID Connect Authorization\" . \n \n ^ Goode, Lauren (2019-06-15). \"App Makers Are Mixed on 'Sign In With Apple' \" . Wired . ISSN 1059-1028 . Retrieved 2019-06-15 . \n \n ^ Armando, Alessandro; Carbone, Roberto; Compagna, Luca; Cuéllar, Jorge; Pellegrino, Giancarlo; Sorniotti, Alessandro (2013-03-01). \"An authentication flaw in browser-based Single Sign-On protocols: Impact and remediations\" . Computers &amp; Security . 33 : 41–58. doi : 10.1016/j.cose.2012.08.007 . \n \n ^ \"MicroStrategy's office of the future includes mobile identity and cybersecurity\" . The Washington Post . 2014-04-14 . Retrieved 2014-03-30 . \n \n \n External links [ edit ] \n Single sign-on intro with diagrams",
            "summary": "Single sign-on (SSO) is an authentication scheme allowing users to access multiple related systems using a single ID and password, eliminating the need to log in repeatedly.  While simple versions can use cookies (if sites share a common DNS domain),  more robust systems manage credentials internally, translating them for different authentication mechanisms.  SSO contrasts with directory server authentication (same-sign on), which uses the same credentials from a directory server for each application.  Benefits include reduced password fatigue, lower IT support costs, and simpler administration due to centralized user management.\n",
            "favicon": "https://en.wikipedia.org/static/apple-touch/wikipedia.png",
            "categoryName": "Community",
            "categoryDescription": "Community-driven platforms and forums",
            "evaluation": {
              "justification": "Relevant and recent (2024), provides a good overview of SSO, including various implementations and benefits.",
              "rating": 9
            }
          },
          {
            "id": "https://docs.github.com/enterprise-cloud@latest/authentication/authenticating-with-saml-single-sign-on/about-authentication-with-saml-single-sign-on",
            "title": "About authentication with SAML single sign-on",
            "url": "https://docs.github.com/enterprise-cloud@latest/authentication/authenticating-with-saml-single-sign-on/about-authentication-with-saml-single-sign-on",
            "publishedDate": "2025-04-03T00:00:00.000Z",
            "author": "Authorizing personal access tokens and SSH keys with SAML SSO",
            "text": "You can access an organization that uses SAML single sign-on (SSO) by authenticating through an identity provider (IdP). About authentication with SAML SSO \n SAML single sign-on (SSO) gives organization owners and enterprise owners a way to control and secure access to organization resources like repositories, issues, and pull requests. Organization owners can invite your personal account on GitHub to join their organization that uses SAML SSO, which allows you to contribute to the organization and retain your existing identity and contributions on GitHub. \n If you're a member of an enterprise with managed users, you will instead use a new account that is provisioned for you and controlled by your enterprise. For more information, see Types of GitHub accounts . \n When you attempt to access most resources within an organization that uses SAML SSO, GitHub will redirect you to the organization's SAML IdP to authenticate. After you successfully authenticate with your account on the IdP, the IdP redirects you back to GitHub, where you can access the organization's resources. \n IdP authentication is not required for accessing public repositories in certain ways: \n \n Viewing the repository's overview page and file contents on GitHub \n Forking the repository \n Performing read operations via Git, such as cloning the repository \n \n Authentication is required for other access to public repositories, such as viewing issues, pull requests, projects, and releases. \n Note \n \nSAML authentication is not required for outside collaborators. For more information about outside collaborators, see Roles in an organization . \n \n If you have recently authenticated with your organization's SAML IdP in your browser, you are automatically authorized when you access a GitHub organization that uses SAML SSO. If you haven't recently authenticated with your organization's SAML IdP in your browser, you must authenticate at the SAML IdP before you can access the organization. \n You must periodically authenticate with your SAML IdP to authenticate and gain access to the organization's resources on GitHub. The duration of this login period is specified by your IdP and is generally 24 hours. This periodic login requirement limits the length of access and requires you to re-identify yourself to continue. You can view and manage your active SAML sessions in your security settings. For more information, see Viewing and managing your active SAML sessions . \n Linked SAML identities \n When you authenticate with your IdP account and return to GitHub, GitHub will record a link in the organization or enterprise between your GitHub personal account and the SAML identity you signed into. This linked identity is used to validate your membership in that organization, and depending on your organization or enterprise setup, is also used to determine which organizations and teams you're a member of as well. Each GitHub account can be linked to exactly one SAML identity per organization. Likewise, each SAML identity can be linked to exactly one GitHub account in an organization. \n If you sign in with a SAML identity that is already linked to another GitHub account, you will receive an error message indicating that you cannot sign in with that SAML identity. This situation can occur if you are attempting to use a new GitHub account to work inside of your organization. If you didn't intend to use that SAML identity with that GitHub account, then you'll need to sign out of that SAML identity and then repeat the SAML login. If you do want to use that SAML identity with your GitHub account, you'll need to ask your admin to unlink your SAML identity from your old account, so that you can link it to your new account. Depending on the setup of your organization or enterprise, your admin may also need to reassign your identity within your SAML provider. For more information, see Viewing and managing a member's SAML access to your organization . \n If the SAML identity you sign in with does not match the SAML identity that is currently linked to your GitHub account, you'll receive a warning that you are about to relink your account. Because your SAML identity is used to govern access and team membership, continuing with the new SAML identity can cause you to lose access to teams and organizations inside of GitHub. Only continue if you know that you're supposed to use that new SAML identity for authentication in the future. \n To use the API or Git on the command line to access protected content in an organization that uses SAML SSO, you will need to use an authorized personal access token over HTTPS or an authorized SSH key. \n If you don't have a personal access token or an SSH key, you can create a personal access token for the command line or generate a new SSH key. For more information, see Managing your personal access tokens or Generating a new SSH key and adding it to the ssh-agent . \n To use a new or existing personal access token or SSH key with an organization that uses or enforces SAML SSO, you will need to authorize the token or authorize the SSH key for use with a SAML SSO organization. For more information, see Authorizing a personal access token for use with SAML single sign-on or Authorizing an SSH key for use with SAML single sign-on . \n About OAuth apps, GitHub Apps, and SAML SSO \n You must have an active SAML session each time you authorize an OAuth app or GitHub App to access an organization that uses or enforces SAML SSO. You can create an active SAML session by navigating to https://github.com/orgs/ORGANIZATION-NAME/sso in your browser. \n After an enterprise or organization owner enables or enforces SAML SSO for an organization, and after you authenticate via SAML for the first time, you must reauthorize any OAuth apps or GitHub Apps that you previously authorized to access the organization. \n To see the OAuth apps you've authorized, visit your OAuth apps page . To see the GitHub Apps you've authorized, visit your GitHub Apps page . \n For more information, see SAML and GitHub Apps . \n Further reading \n \n About identity and access management with SAML single sign-on",
            "summary": "GitHub Enterprise Cloud uses SAML single sign-on (SSO) to control access to organization resources.  When accessing an organization using SAML SSO, you'll be redirected to your organization's identity provider (IdP) to authenticate.  After successful authentication, you'll be redirected back to GitHub.  This process is required for most resource access, but not for viewing public repository overviews, forking, or performing read-only Git operations.  Access is automatically authorized if you've recently authenticated with your IdP, but periodic re-authentication (usually every 24 hours) is required.  Each GitHub account can be linked to one SAML identity per organization.\n",
            "image": "https://github.githubassets.com/images/modules/open_graph/github-logo.png",
            "favicon": "https://docs.github.com/assets/cb-345/images/site/favicon.png",
            "categoryName": "Community",
            "categoryDescription": "Community-driven platforms and forums",
            "evaluation": {
              "justification": "Relevant and recent (2025), describes GitHub's use of SAML SSO.",
              "rating": 8
            }
          },
          {
            "id": "https://docs.github.com/en/enterprise-cloud@latest/authentication/authenticating-with-saml-single-sign-on",
            "title": "Authenticating with SAML single sign-on",
            "url": "https://docs.github.com/en/enterprise-cloud@latest/authentication/authenticating-with-saml-single-sign-on",
            "publishedDate": "2024-06-29T00:00:00.000Z",
            "author": "",
            "text": "You can authenticate to GitHub Enterprise Cloud with SAML single sign-on (SSO) and view your active sessions. Authenticating with Enterprise Managed Users Learn how to authenticate to access an enterprise with managed users on GitHub. About authentication with SAML single sign-on You can access an organization that uses SAML single sign-on (SSO) by authenticating through an identity provider (IdP). Authorizing an SSH key for use with SAML single sign-on To use an SSH key with an organization that uses SAML single sign-on (SSO), you must first authorize the key. Authorizing a personal access token for use with SAML single sign-on To use a personal access token (classic) with an organization that uses SAML single sign-on (SSO), you must first authorize the token. Viewing and managing your active SAML sessions You can view and revoke your active SAML sessions in your settings.",
            "summary": "This GitHub Enterprise Cloud documentation page explains how to authenticate using SAML single sign-on (SSO).  It covers authenticating with managed user accounts, using SSO with an identity provider (IdP), and authorizing SSH keys and personal access tokens for use with SSO.  The page also details how to view and manage active SAML sessions.\n",
            "favicon": "https://docs.github.com/assets/cb-345/images/site/favicon.png",
            "categoryName": "Community",
            "categoryDescription": "Community-driven platforms and forums",
            "evaluation": {
              "justification": "Relevant and recent (2024), explains GitHub's SAML SSO implementation.",
              "rating": 8
            }
          },
          {
            "id": "https://en.wikipedia.org/wiki/List_of_single_sign-on_implementations",
            "title": "List of single sign-on implementations",
            "url": "https://en.wikipedia.org/wiki/List_of_single_sign-on_implementations",
            "publishedDate": "2024-02-20T14:13:50.000Z",
            "author": "Contributors to Wikimedia projects",
            "text": "From Wikipedia, the free encyclopedia \n \n \n These are some of the notable Single Sign-On (SSO) implementations available:\n \n \n \n Product Name \n \n Project/Vendor \n \n License \n \n Identity management platform \n \n Description \n \n \n Accounts &amp; SSO \n Nokia , Intel ,… \n Free software \n \n Client-side implementation with plugins for various services/protocols\n \n \n Active Directory Federation Services \n Microsoft \n Proprietary \n \n Claims-based system and application federation using SAML 2.0 or WS-Federation \n \n \n Bitium \n Bitium \n Proprietary \n \n Enterprise cloud-based identity and access management solution with single sign-on, active directory integration and 2-factor authentication options\n \n \n CAS / Central Authentication Service \n Apereo \n Free &amp; Open Source ( Apache 2.0 )\n \n \n Protocol and open-source SSO server/client implementation with support for CAS, SAML1, SAML2, OAuth2, SCIM, OpenID Connect and WS-Fed protocols both as an identity provider and a service provider with other auxiliary functions that deal with user consent, access management, impersonation, terms of use, etc. Licensed under Apache 2.0.\n \n \n CoSign single sign on \n University of Michigan \n Academic \n \n SSO for University of Michigan\n \n \n Distributed Access Control System (DACS) \n Distributed Systems Software \n Free Software \n \n \n \n \n Facebook connect \n Facebook \n Proprietary \n \n Facebook SSO to third parties enabled by Facebook\n \n \n FreeIPA \n Red Hat \n Free Software \n Yes \n \n \n \n IceWall SSO \n Hewlett-Packard Enterprise \n Proprietary \n \n Web and Federated Single Sign-On Solution\n \n \n IBM Enterprise Identity Mapping \n IBM \n Free software \n Yes \n Works with Kerberos (e.g. Active Directory) and other authentication mechanisms to map different identities and hence allow single signon to all IBM server platforms (Windows, Linux, PowerLinux, IBM i, i5/OS, OS/400, AIX) even when the user name differs.\n \n \n LTPA \n IBM \n Proprietary \n \n \n \n \n Imprivata OneSign \n Imprivata \n Proprietary \n \n \n \n \n Janrain Federate SSO \n Janrain \n Proprietary \n Yes \n Social and conventional user SSO\n \n \n JOSSO \n JOSSO \n Free Software \n \n Open Source Single Sign-On Server\n \n \n Keycloak (Red Hat Single Sign-On) \n Red Hat \n Open source \n Yes \n Federated SSO (LDAP and Active Directory), standard protocols (OpenID Connect, OAuth 2.0 and SAML 2.0) for Web, clustering and single sign on . Red Hat Single Sign-On is version of Keycloak for which RedHat provides commercial support.\n \n \n Microsoft account \n Microsoft \n Proprietary \n \n Microsoft single sign-on web service\n \n \n Microsoft Azure Active Directory \n \n Microsoft\n \n Proprietary\n \n Yes\n \n Cloud based single sign-on which supports SAML 2.0 , WS-Federation , and OpenID Connect \n \n \n myOneLogin \n VMware \n Proprietary \n \n Cloud single sign-on\n \n \n NetIQ Access Manager \n Microfocus \n Proprietary \n Yes, used in conjunction with NetIQ Identity Manager \n Access Management, Federation and Risk-Based Access Control platform\n \n \n Numina Application Framework \n Numina Solutions \n Proprietary \n Yes \n Single sign-on system for Windows (OpenID RP &amp; OP, SAML IdP, and proprietary)\n \n \n Okta \n \n Okta, Inc. \n \n \n \n Yes\n \n Okta is SaaS based identity management and Single Sign On service provider which supports SAML 2.0 , OpenID Connect and other protocols\n \n \n OneLogin \n OneLogin Inc. \n Proprietary \n Yes \n Cloud-based identity and access management with single sign-on (SSO) and active directory integration\n \n \n OpenAthens \n Jisc \n Proprietary \n Yes \n Identity and access management solutions to IdPs and SPs enabling access management to web-based resources. Fully hosted service with several directory integration options, dedicated support team. Maintains OpenAthens Federation. SAML 1.1, SAML 2.0, SSO, self-reg, compatibility with Shibboleth, API.\n \n \n OpenAM \n Open Identity Platform Community \n CDDL \n Yes, used in conjunction with OpenDJ and OpenIDM \n Access management, entitlements and federation server platform\n \n \n Oracle Identity Management \n Oracle Corporation \n Proprietary \n Yes \n Identity and Access Management Suite of products from Oracle\n \n \n SecureLogin \n NetIQ \n Proprietary \n \n Enterprise Single-Sign-On\n \n \n Shibboleth \n Shibboleth \n Free &amp; Open Source ( Apache 2.0 ) \n \n SAML-based open source access control\n \n \n Ubuntu Single Sign On \n Canonical Ltd. \n Proprietary \n \n OpenID-based SSO for Launchpad and Ubuntu services\n \n \n Univention Corporate Server \n Univention \n Free &amp; Open Source \n \n Enterprise IAM with single sign-on using SAML \n \n \n Wren:AM \n Wren Security \n CDDL \n Yes, in conjunction with Wren:IDM \n Open-source Access Management and Single Sign-On platform\n \n \n WSO2 Identity Server \n WSO2 \n Free &amp; Open Source ( Apache 2.0 ) \n Yes \n SAML 2.0, OpenID, OpenID Connect, OAuth 2.0, SCIM, XACML, Passive Federation\n \n \n ZXID \n ZXID \n Free Software \n Yes \n Reference Implementation of TAS3 security\n \n See also [ edit ] \n List of OAuth providers \n Identity management \n Identity management systems \n OpenID \n SAML 2.0 \n SAML-based products and services",
            "summary": "This Wikipedia page lists various single sign-on (SSO) implementations.  Examples include Microsoft's Active Directory Federation Services (using SAML 2.0 or WS-Federation), the open-source Central Authentication Service (CAS, supporting multiple protocols),  Facebook Connect, and several others from vendors like Nokia, Intel, Bitium, Red Hat (FreeIPA), and IBM.  The list details each product's vendor, license type (proprietary or open-source), and a brief description.\n",
            "favicon": "https://en.wikipedia.org/static/apple-touch/wikipedia.png",
            "categoryName": "Community",
            "categoryDescription": "Community-driven platforms and forums",
            "evaluation": {
              "justification": "Relevant and recent (2024), lists various SSO implementations.",
              "rating": 8
            }
          },
          {
            "id": "https://github.com/topics/single-sign-on",
            "title": "single-sign-on",
            "url": "https://github.com/topics/single-sign-on",
            "publishedDate": "2025-03-04T06:25:34.000Z",
            "author": "",
            "text": "Single sign-on ( SSO ) is an authentication scheme that allows a user to log in with a single ID to any of several related, yet independent, software systems. SSO supporters place emphasis on it reducing the risk of password fatigue and improvement of usability in terms of perceived corperate identity between different services of the same provider. Conversely, single sign-off or single log-out ( SLO ) is the property whereby a single action of signing out terminates access to multiple software systems.",
            "summary": "Single sign-on (SSO) is an authentication method allowing users to access multiple related software systems with one ID, reducing password fatigue and improving usability.  Conversely, single sign-off (SLO) lets users log out of multiple systems simultaneously.\n",
            "image": "https://github.githubassets.com/assets/github-octocat-13c86b8b336d.png",
            "favicon": "https://github.com/fluidicon.png",
            "categoryName": "Community",
            "categoryDescription": "Community-driven platforms and forums",
            "evaluation": {
              "justification": "Relevant and recent (2025), brief description of SSO.",
              "rating": 7
            }
          },
          {
            "id": "https://stackoverflow.com/questions/77679120/what-is-the-difference-between-sso-and-oauth",
            "title": "What is the difference between SSO and Oauth?",
            "url": "https://stackoverflow.com/questions/77679120/what-is-the-difference-between-sso-and-oauth",
            "publishedDate": "2023-12-18T12:34:00.000Z",
            "author": "SergiuSergiu 4,58811 gold badge1515 silver badges2222 bronze badges",
            "text": "I've been working with authentication providers and custom implementations of authentication at the application level, and I can't still wrap my head around these 2 concepts entirely. \n I understand SSO, as the name implies, is to provide a centralized login experience where I can use a single set of credentials to access multiple platforms. While oauth allows users to access resources based on credentials from an authorization server. \n If I have a single set of credentials that allow me to access 4 different platforms, that is SSO. But if these 4 platforms allow social login using google for instance, It is basically the same? As I am able to access the same 4 platforms with my single google credentials. \n What makes the difference between SSO and oauth if both can be used to provide access to multiple platforms with the same set of credentials, and as I understand both work with some sort of authentication server (I understand SSO has a centralized authorization service or something similar)? \n \n \n \n \nasked Dec 18, 2023 at 12:34 \n \n \n \n \n \n \n Oscar Calderon Oscar Calderon 989 3 gold badges 14 silver badges 32 bronze badges \n \n \n \n \n 1 \n \n \n \n \n \n SSO and OAuth are two different protocols that can be used for different purposes. \n SSO is a method that allows users to authenticate once and access multiple applications without being prompted to enter their credentials again. This is typically done by an identity provider (IdP) that issues a token to the user, which is then passed to the different applications the user wants to access. \n OAuth, on the other hand, is an open standard for authorization (not authentication). It allows users to grant third-party applications access to their resources (e.g. data) without sharing their credentials. OAuth does not provide authentication, but it can be used in conjunction with other protocols, such as SSO, to provide a seamless user experience. \n In summary, SSO is used for authenticating users, while OAuth is used for granting access to resources. OAuth can be used as part of an SSO solution, but it is not a replacement for SSO. \n \n \n \n \nanswered Dec 18, 2023 at 12:52 \n \n \n \n \n \n \n \n 2 \n \n \n \n OAuth (Open Authorization) 2.0 is an authorization protocol that allows users to grant one app limited access to their data on another app or service. \n SSO (Single Sign-On) is an authentication method that allows users to authenticate once with an Identity Provider (IdP) and gain access to multiple apps. \n \n \n \n \nanswered Dec 1, 2024 at 17:57 \n \n \n \n \n \n \n \n \n \n \n SSO can be validated via SAML(Security Assertion Markup Language) or OIDC(Open ID Connect). \n OIDC is built on the flow of OAuth2, so you will see strong similarities with OAuth2 when using SSO(OIDC). But OAuth is very different from SSO because it only caters to authorization, not authentication. \n \n If I have a single set of credentials that allow me to access 4\ndifferent platforms, that is SSO. But if these 4 platforms allow\nsocial login using google for instance, It is basically the same? As I\nam able to access the same 4 platforms with my single google\ncredentials. \n \n What you described here is Social SSO, which uses the Google Auth server for SSO. You will see it is very similar to OAuth2 because Google used OIDC, which is built on the flow of OAuth2, as I previously explained. \n \n \n \n \nanswered Nov 29, 2024 at 19:04 \n \n \n \n \n \n \n \n 1",
            "summary": "Single Sign-On (SSO) is an authentication method letting users access multiple applications after authenticating once with an Identity Provider (IdP).  This contrasts with OAuth, an authorization protocol granting limited access to user data on one app from another, without sharing credentials.  While both might use a single set of credentials to access multiple platforms, SSO focuses on authentication, while OAuth focuses on authorization.  Social SSO, like using Google credentials across multiple platforms, is a specific type of SSO.\n",
            "image": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
            "favicon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico?v=ec617d715196",
            "categoryName": "Community",
            "categoryDescription": "Community-driven platforms and forums",
            "evaluation": {
              "justification": "Relevant and recent (2023), compares SSO and OAuth.",
              "rating": 9
            }
          },
          {
            "id": "https://news.ycombinator.com/item?id=39818739",
            "title": "How does Single Sign-On (SSO) work?",
            "url": "https://news.ycombinator.com/item?id=39818739",
            "publishedDate": "2024-03-25T17:06:21.000Z",
            "author": "",
            "text": "A nice overview of SSO, which is also known as federation. Leaves out some of the more complicated aspects of SSO, such as: * Logout (surprisingly complicated, see this video for more: https://m.youtube.com/watch?v=96m7DDQBW0U ) * Linking accounts (if you let someone login with Google, then also let them login with email and they use the same Gmail address, is it one account or two?) * Verifying account ownership (more important for if anyone can register under any email address) * Setting up the SSO integration (how does Google know how to trust Trello?) \n \n \n \n Actually logout is not complicated. But openidconnect allows single-logout , which most of the time, you do not even need. \n \n \n \n \n \n The thing is, most of the time you don’t want single logout. You want to logout of the specific application, not from the idp and all rp‘s. Think about it, which user want to logout from your app and entra id and all the rp‘s? Probably only a few. \n \n \n \n \n It really depends what you are doing.\nIf you control your own idp and you have multiple rp‘s you probably need it tough, but in this case a lot of things are hard, no matter if you use openid connect or nothing. Btw. even if you target entra id or other idp‘s it’s always a good idea to also have a way to trigger the single logout, some people might need it, so it is good to have it behind an Option.\nAlso you should at least implement the backchannel logout.\nBut as said none is really a requirement and often you just use an upfront idp as a second way to login and maintain your own user data in this case single logout is just an addon not a necessity. \n \n \n \n SSO protocols work great until you try to implement then 100% to spec. Then you realize how many vendors do weird shit with their SPs. \n \n \n \n Like what Michael said, there are a number of companies willing to act as an adapter for your SSO needs. My employer, FusionAuth, is another. Agreed that every SP is slightly different. There's a reason the SAML spec is 800+ pages, it covers a lot of variations. Since it has not been substantially updated since, there are some legacy choices (hello XML). We also maintain an open source java SAML library:\n https://github.com/FusionAuth/fusionauth-samlv2 SSO is simple on the surface and complex once you peel it back! \n \n \n \n \n The author's posts are well written. I browsed through several related articles because I'm doing some work in the authz/authn space right now and this helps to get my head back into it a bit. None of the articles seem to go super deep, but that's ok. I'm also in the middle of reading OpenID Connect In Action. It seems ok, but rather dry so far. Maybe the subject material is just inherently a bit tedious and boring to me personally. Does anyone have any good posts or books they would recommend for getting a better grasp on some of the authentication protocols? \n \n \n \n \n \n \n \n This isn’t about passwords. The token from the identity server (Google in this case), describes the user, including their identity - which you may use as a link to the user data. If I were to forge an token, I could impersonate the user. For this reason, you need to verify the token with the identity server.",
            "summary": "Single Sign-On (SSO), also known as federation, allows users to access multiple applications with a single set of credentials.  While seemingly simple, SSO implementation can be complex, especially concerning logout (which can be surprisingly intricate), linking accounts, verifying account ownership, and setting up integrations (e.g., how Google trusts Trello).  Many vendors handle SSO differently, leading to variations in implementation.  OpenID Connect is one protocol used, though single logout isn't always necessary or desired.  Resources like the FusionAuth open-source Java SAML library can assist with implementation.\n",
            "favicon": "https://news.ycombinator.com/y18.svg",
            "categoryName": "Community",
            "categoryDescription": "Community-driven platforms and forums",
            "evaluation": {
              "justification": "Relevant and recent (2024), discusses SSO implementation complexities.",
              "rating": 8
            }
          }
        ]
      },
      {
        "category": "Neutral",
        "description": "Educational and vendor-neutral resources",
        "domains": [
          "owasp.org",
          "developer.mozilla.org"
        ],
        "results": [
          {
            "id": "https://secureflag.owasp.org/integrations/",
            "title": "SecureFlag's Integrations",
            "url": "https://secureflag.owasp.org/integrations/",
            "publishedDate": "2025-01-01T00:00:00.000Z",
            "author": "",
            "text": "Single Sign-On (SSO) Learning Management Systems (LMS) Development Pipeline Contextual Remediation Guidance Single Sign-On (SSO) SecureFlag offers a seamless and secure user authentication supporting integrations with SAML or OAuth-based identity providers. Furthermore, the availability of SCIM for automated provisioning further streamlines user management, offering an efficient, scalable, and secure solution to facilitate smooth operations and enhanced user experience. Learning Management Systems (LMS) Through this integration, organizations can enhance the delivery and tracking of learning experiences. Our Learning Management Systems integration allows for centralized reporting and analytical insights into learning paths, and it also fosters an enriched learning culture, providing employees with a one-stop solution for all their learning needs. Development Pipeline Organizations can tailor their training programs based on detected vulnerabilities, ensuring a proactive approach to security. SecureFlag supports custom integrations, allowing you to create a bespoke security ecosystem that aligns with your business goals, fostering a culture that is as agile as it is secure. Contextual Remediation Guidance This integration provides your development and operational teams with instantaneous insights and practical guidance for addressing vulnerabilities, supplemented with relevant labs for hands-on practice. By integrating just-in-time training directly within the developers' workflow, it facilitates a quicker resolution of vulnerabilities, enhancing efficiency and security.",
            "summary": "SecureFlag's platform integrates with Single Sign-On (SSO) systems using SAML or OAuth-based identity providers.  It also leverages SCIM for automated user provisioning, streamlining user management and enhancing security.\n",
            "image": "https://secureflag.com/assets/metaTagImages/integrations.png",
            "favicon": "https://secureflag.owasp.org/favicon.svg",
            "categoryName": "Neutral",
            "categoryDescription": "Educational and vendor-neutral resources",
            "evaluation": {
              "justification": "Relevant and recent (2025), mentions SSO integration.",
              "rating": 7
            }
          },
          {
            "id": "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/CORP",
            "title": "Cross-Origin Resource Policy (CORP) implementation",
            "url": "https://developer.mozilla.org/en-US/docs/Web/Security/Practical_implementation_guides/CORP",
            "publishedDate": "2024-08-07T00:00:00.000Z",
            "author": "",
            "text": "Cross-Origin Resource Policy (CORP) is set by the Cross-Origin-Resource-Policy response header, which lets websites and applications opt-in to protection against vulnerabilities related to certain cross-origin requests (such as those made by the &lt;script&gt; and &lt;img&gt; elements). Problem Some side-channel hardware vulnerabilities (also known as Cross-site leaks, or XS-Leaks), such as Meltdown and Spectre , exploit a race condition arising as part of speculative execution functionality of modern processors. This functionality is designed to improve performance but can be manipulated to disclose sensitive data. Solution Use Cross-Origin-Resource-Policy to block no-cors cross-origin requests to given resources. As this policy is expressed via a response header, the actual request is not prevented. Instead, the browser prevents the result from being leaked by stripping out the response body. \n The possible values are: \n \n same-origin \n \n Limits resource access to requests coming from the same origin. This is recommended for URLs that reply with sensitive user information or private APIs. \n \n same-site \n \n Limits resource access to requests coming from the same site. This is recommended for responses from origins whose functionality is shared across several other same-site origins. Examples include a company CDN that serves static resources, and a single sign-on (SSO) app that handles authentication. \n \n cross-origin \n \n Allows resources to be accessed by cross-origin requests. This is recommended only for responses from widely-used origins, such as public CDNs or widgets. This is the default value if Cross-Origin-Resource-Policy is not set. \n \n \n Set the most restrictive value possible for your site. \n If, in turn, your site requires access to cross-origin resources, opt into a better default by sending a Cross-Origin-Embedder-Policy header along with the associated requests. This will prevent loading of cross-origin resources that don't also explicitly send a Cross-Origin-Resource-Policy: cross-origin header. Examples Instruct browsers to disallow cross-origin requests made in no-cors mode: \n Cross-Origin-Resource-Policy: same-origin\n \n Instruct browsers to allow cross-origin resource access, including access to features with unthrottled timers (such as SharedArrayBuffer objects or Performance.now() ): \n Cross-Origin-Resource-Policy: same-origin\nCross-Origin-Embedder-Policy: require-corp\n \n This also permits such resources to be embedded. See also",
            "summary": "The Cross-Origin Resource Policy (CORP) `same-site` value is recommended for Single Sign-On (SSO) applications.  This limits resource access to requests from the same site, suitable for applications where functionality is shared across multiple same-site origins.\n",
            "image": "https://developer.mozilla.org/mdn-social-share.d893525a4fb5fb1f67a2.png",
            "favicon": "https://developer.mozilla.org/favicon-48x48.bc390275e955dacb2e65.png",
            "categoryName": "Neutral",
            "categoryDescription": "Educational and vendor-neutral resources",
            "evaluation": {
              "justification": "Relevant and recent (2024), recommends `same-site` for SSO applications.",
              "rating": 7
            }
          },
          {
            "id": "https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API",
            "title": "Storage Access API - MDN Web Docs - Mozilla",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API",
            "publishedDate": "2024-05-22T00:00:00.000Z",
            "author": "",
            "text": "The Storage Access API provides a way for cross-site content loaded in a third-party context (i.e., embedded in an &lt;iframe&gt; ) to gain access to third-party cookies and unpartitioned state that it would typically only have access to in a first-party context (i.e., when loaded directly in a browser tab). \n The Storage Access API is relevant to user agents that, by default, block access to third-party cookies and unpartitioned state to improve privacy (for example, to prevent tracking). There are legitimate uses for third-party cookies and unpartitioned state that we still want to enable, even with these default restrictions in place. Examples include single sign-on (SSO) with federated identity providers (IdPs), or persisting user details such as location data or viewing preferences across different sites. \n The API provides methods that allow embedded resources to check whether they currently have access to third-party cookies and, if not, to request access from the user agent. Concepts and usage Browsers implement several storage access features and policies restricting access to third-party cookies and unpartitioned state. These range from giving embedded resources under each top-level origin a unique cookie storage space ( partitioned cookies ) to outright blocking of cookie access when resources are loaded in a third-party context. \n The semantics around third-party cookie and unpartitioned state blocking features and policies differ from browser to browser, but the core functionality is similar. Cross-site resources embedded in a third-party context are not given access to the same state that they would have access to when loaded in a first-party context. This is done with good intent — browser vendors want to take steps to better protect their user's privacy and security. Examples include leaving them less open to having their activity tracked across different sites, and less vulnerable to exploits such as cross-site request forgery ( CSRF ). \n However, there are legitimate uses for embedded cross-site content accessing third-party cookies and unpartitioned state, which the above features and policies are known to break. Let's say you've got a series of different sites that provide access to different products — heads-example.com , shoulders-example.com , knees-example.com , and toes-example.com . \n Alternatively, you might separate your content or services into different country domains for localization purposes — example.com , example.ua , example.br , etc. — or in some other way. \n You might have accompanying utility sites with components embedded in all the other sites, for example, to provide SSO ( sso-example.com ) or general personalization services ( services-example.com ). These utility sites will want to share their state with the sites they are embedded in via cookies. They cannot share first-party cookies because they are on different domains, and third-party cookies will no longer work in browsers that block them. \n In such situations, site owners often encourage users to add their site as an exception or to disable third-party cookie-blocking policies entirely. Users who wish to continue interacting with their content must significantly relax their blocking policy for resources loaded from all embedded origins and possibly across all websites. \n The Storage Access API is intended to solve this problem; embedded cross-site content can request unrestricted access to third-party cookies and unpartitioned state on a frame-by-frame basis via the Document.requestStorageAccess() method. It can also check whether it already has access via the Document.hasStorageAccess() method. Unpartitioned versus partitioned cookies It is important to note that the Storage Access API is only needed to provide access to unpartitioned third-party cookies. This means cookies stored in the traditional way since the early web — all cookies set on the same site are stored in the same cookie jar. This is in contrast to partitioned cookies, where embedded resources under each top-level site are given a unique cookie storage space, thereby making tracking users across sites via these cookies impossible. \n Browsers have various mechanisms to partition third-party cookie access, for example Firefox Total Cookie Protection and Cookies Having Independent Partitioned State (CHIPS) . \n When we talk about third-party cookies in the context of the Storage Access API, we implicitly mean unpartitioned third-party cookies. How it works Embedded content that has a legitimate need for third party cookie or unpartitioned state access can request access using the Storage Access API as follows: \n \n It can call the Document.hasStorageAccess() method to check whether it has the access it needs already. \n If not, it can request access via the Document.requestStorageAccess() method. \n Depending on the browser, the user will be asked whether to grant access to the requesting embed in slightly different ways.\n \n Safari shows prompts for all embedded content that has not previously received storage access. \n Firefox only prompts users after an origin has requested storage access on more than a threshold number of sites. \n Chrome shows prompts for all embedded content that has not previously received storage access. It will however automatically grant access and skip prompts if the embedded content and embedding site are part of the same related website set . \n \n \n Access is granted or denied based on whether the content meets all the security requirements — see Security measures for general requirements, and Browser-specific variations for some browser-specific security requirements. The Promise -based nature of requestStorageAccess() allows you to run code to handle success and failure cases.\n \n Modern spec behavior dictates that access is granted per-frame — every separate content embed has its third-party cookie access blocked by default, and needs to call requestStorageAccess() to opt in to access. If a content embed has received access, and same-site embeds then call requestStorageAccess() , their promises will fulfill automatically. But they still need to opt in. \n The only exception to the \"blocked by default\" behavior is when a content embed makes a successful requestStorageAccess() , but then performs a same-origin navigation (for example reloading itself). In such cases, the storage access is carried over from the previous navigation. \n In older spec versions, the access was per-page (Safari is the only browser still using this model). When one embed received third-party cookie access via requestStorageAccess() , all other same-site embeds would automatically receive access. This was not desirable behavior from a security standpoint — for example, if shop.example.com embedded locator.users.com to allow users to use their location info while shopping, and locator.users.com called requestStorageAccess() , shop.example.com and any other sites it embeds would be able to access its cookies, but also access cookies from private.users.com , which is not intended to be embedded. Read more about the motivations behind this change. \n \n \n Once access is granted, a permission key is stored in the browser with the structure &lt;top-level site, embedded site&gt; . For example, if the embedding site is embedder.com , and the embed is locator.example.com , the key would be &lt;embedder.com, example.com&gt; . Same-site embeds ( docs.example.com , profile.example.com , etc.) would then be able to call requestStorageAccess() and the promise would fulfill automatically, as mentioned earlier.\n \n Older spec versions used the more specific permission key structure &lt;top-level site, embedded origin&gt; , which meant that same-site, cross-origin embeds didn't match the permission key and had to go through the whole process separately. \n \n \n \n Note: In cases where a top-level site has its cookies partitioned , the Storage Access API isn't required, as sharing the cookies by default has no privacy risk. Security measures Several different security measures could cause a Document.requestStorageAccess() call to fail. Check the below list if you are having trouble getting a request to work: \n \n The call must be associated with a user gesture ( transient activation ) such as a tap or click. This prevents embedded content on the page from spamming the browser or user with excessive access requests. Note that this isn't required if:\n \n Permission to use the API has already been granted, for example by another same-site resource calling requestStorageAccess() . \n The caller is a top-level document or same-site to the top-level document. In such cases, requestStorageAccess() probably doesn't need to be called at all. \n \n \n The document and top-level document must not have a null origin. \n Origins that have never been interacted with as a first party do not have a notion of first-party storage. From the user's perspective, they only have a third-party relationship with that origin. Access requests are automatically denied if the browser detects that the user hasn't interacted with the embedded content in a first-party context recently (in Firefox, \"recently\" means within 30 days). \n The document's window must be a secure context . \n Sandboxed &lt;iframe&gt; s cannot be granted storage access by default for security reasons. The API therefore also adds the allow-storage-access-by-user-activation sandbox token . The embedding website needs to add this to allow storage access requests to be successful, along with allow-scripts and allow-same-origin to allow it to execute a script to call the API and execute it in an origin that can have cookies/state:\n &lt; iframe \n sandbox = \" allow-storage-access-by-user-activation\nallow-scripts\nallow-same-origin \" &gt; \n…\n &lt;/ iframe &gt; \n \n \n Usage of this feature may be blocked by a storage-access Permissions Policy set on your server. \n \n Note: The document may also be required to pass additional browser-specific checks. Examples: allowlists, blocklists, on-device classification, user settings, anti- clickjacking heuristics, or prompting the user for explicit permission. Browser-specific variations Although the API surface is the same, websites using the Storage Access API should expect differences in the level and extent of third-party cookie access they receive between different browsers, due to differences in their storage access policies. Chrome \n Cookies must have SameSite=None explicitly set on them, because the default value for Chrome is SameSite=Lax ( SameSite=None is the default in Firefox and Safari). \n Cookies must have the Secure attribute set on them. \n The storage access grants are phased out after 30 days of browser usage passed without user interaction. Interaction with the embedded content extends this limit by another 30 days. This doesn't occur when Document.requestStorageAccessFor() is called because the user is already on the page. \n Firefox \n If the embedded origin tracker.example has already obtained third-party cookie access on the top-level origin foo.example , and the user visits a page from foo.example embedding a page from tracker.example again in less than 30 days, the embedded origin will have third-party cookie access immediately when loading. \n The storage access grants are phased out after 30 calendar days have passed. \n \n Documentation for Firefox's new storage access policy for blocking tracking cookies includes a detailed description of the scope of storage access grants. Safari \n The storage access grants are phased out after 30 days of browser usage passed without user interaction. Successful use of the Storage Access API resets this counter. \n Examples \n See Using the Storage Access API for an implementation guide with code examples. \n See Storage Access API Demo for a live demo. \n API methods \n Document.hasStorageAccess() \n \n Returns a Promise that resolves with a boolean value indicating whether the document has access to third-party cookies. \n \n Document.hasUnpartitionedCookieAccess() \n \n New name for Document.hasStorageAccess() . \n \n Document.requestStorageAccess() \n \n Allows content loaded in a third-party context (i.e., embedded in an &lt;iframe&gt; ) to request access to third-party cookies and unpartitioned state; returns a Promise that resolves if the access was granted, and rejects if access was denied. \n \n Document.requestStorageAccessFor() \n Experimental \n \n \n A proposed extension to the Storage Access API that allows top-level sites to request third-party cookie access on behalf of embedded content originating from another site in the same related website set . Returns a Promise that resolves if the access was granted, and rejects if access was denied. \n \n \n Note: User interaction propagates to the promise returned by these methods, allowing the callers to take actions requiring user interaction without requiring a second click. For example, a caller could open a pop-up window from the resolved promise without triggering Firefox's pop-up blocker. Additions to other APIs \n Permissions.query() , the \"storage-access\" feature name \n \n In supporting browsers, this can query whether third-party cookie access has been granted in general, that is, to another same-site embed. If so, you can call requestStorageAccess() without user interaction, and the promise will resolve automatically. \n \n Permissions.query() , the \"top-level-storage-access\" feature name \n Experimental \n \n \n A separate feature name used to query whether permission to access third-party cookies has already been granted via requestStorageAccessFor() . If so, you don't need to call requestStorageAccessFor() again. \n \n Specifications Specification The Storage Access API Extending Storage Access API (SAA) to non-cookie storage Browser compatibility api.Document.hasStorageAccess BCD tables only load in the browser api.Document.hasUnpartitionedCookieAccess BCD tables only load in the browser api.Document.requestStorageAccess BCD tables only load in the browser api.Document.requestStorageAccessFor BCD tables only load in the browser api.Permissions.permission_storage-access BCD tables only load in the browser See also",
            "summary": "The Storage Access API allows embedded websites (e.g., in `<iframe>`) to access third-party cookies and unpartitioned state, even when browsers block them by default for privacy reasons.  This is crucial for functionalities like single sign-on (SSO) across different websites, where a utility site (e.g., `sso-example.com`) needs to share its state with embedded sites for authentication.  Without this API, users would need to disable third-party cookie blocking, compromising their privacy.\n",
            "image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
            "favicon": "https://developer.mozilla.org/favicon-48x48.cbbd161b.png",
            "categoryName": "Neutral",
            "categoryDescription": "Educational and vendor-neutral resources",
            "evaluation": {
              "justification": "Relevant and recent (2024), explains the importance of Storage Access API for SSO.",
              "rating": 8
            }
          },
          {
            "id": "https://developer.mozilla.org/en-US/docs/Glossary/Federated_identity",
            "title": "Federated identity - Glossary - MDN Web Docs",
            "url": "https://developer.mozilla.org/en-US/docs/Glossary/Federated_identity",
            "publishedDate": "2024-07-08T00:00:00.000Z",
            "author": "",
            "text": "A federated identity system is one in which an identity provider (IdP) acts as an intermediary between users and relying parties , enabling a user to use a single set of credentials to authenticate with a number of different relying parties. \n Traditionally, on the web, a user will sign into a website with a username and a password, and the password is verified by the website against a (properly hashed and salted ) copy stored on the website's backend. \n In this model, if users have multiple accounts with different websites, they have to remember many passwords, and this encourages bad password practices such as using the same password for multiple accounts. \n In a federated identity system, an identity provider: \n \n manages a user's credentials and can authenticate users \n is trusted by multiple websites to make assertions about a user's identity. \n \n A user can then authenticate with the identity provider, which will return a token to the user's browser if authentication is successful. The user's browser will send the token to the website, which can verify that it was issued by the IdP. If the verification succeeds, the website can sign the user in. \n Federated identity is often provided as a service by corporations: for example, users who have Google, Microsoft, or Facebook accounts can use them to sign in to many websites. Websites typically have to implement a process for verifying tokens that is specific to an identity provider. However, open standards such as OpenID , OAuth , and SAML are widely used in the implementation of federated identity systems. \n Although federated identity makes logging into multiple different accounts much easier for users and can greatly improve security, it can have serious implications for a user's privacy. If not carefully designed, a federated identity system can allow identity providers to track users across the web as they sign into multiple different sites. Early federated identity systems on the web were built on technologies such as third-party cookies, which are intrinsically privacy-invasive. As these technologies are being deprecated by browsers, new approaches are needed. The Federated Credential Management (FedCM) API provides a standardized privacy-preserving mechanism for federated identity on the web. See also",
            "summary": "Federated identity systems enable single-sign-on (SSO) by using an identity provider (IdP) as an intermediary.  A user authenticates once with their IdP (e.g., Google, Microsoft, Facebook), receiving a token. This token allows access to multiple websites without needing to re-authenticate, improving user experience and security.  However, potential privacy implications exist if the system isn't carefully designed to prevent tracking across websites.  Open standards like OpenID, OAuth, and SAML are commonly used in implementing federated identity systems.\n",
            "image": "https://developer.mozilla.org/mdn-social-share.d893525a4fb5fb1f67a2.png",
            "favicon": "https://developer.mozilla.org/favicon-48x48.bc390275e955dacb2e65.png",
            "categoryName": "Neutral",
            "categoryDescription": "Educational and vendor-neutral resources",
            "evaluation": {
              "justification": "Relevant and recent (2024), explains federated identity and its relation to SSO.",
              "rating": 9
            }
          },
          {
            "id": "https://developer.mozilla.org/en-US/docs/Glossary/Identity_provider",
            "title": "Identity provider (IdP) - Glossary - MDN Web Docs",
            "url": "https://developer.mozilla.org/en-US/docs/Glossary/Identity_provider",
            "publishedDate": "2024-07-08T00:00:00.000Z",
            "author": "",
            "text": "An identity provider (IdP) is an entity in a federated identity system that manages a user's credentials and can authenticate users. \n In federated identity systems, relying parties , that need to control access to a resource (for example, a website deciding whether to sign a user in) outsource the act of authenticating users to a third party, which they trust to make authentication decisions. These third parties are called identity providers. \n Examples of identity providers on the web include Google, Microsoft, and Facebook. This enables websites to allow users to sign in using the user's Google, Microsoft, or Facebook account. See also",
            "summary": "An identity provider (IdP) manages user credentials and authenticates users in federated identity systems.  Websites using single sign-on (SSO) outsource user authentication to a trusted third-party IdP (like Google, Microsoft, or Facebook), allowing users to access multiple websites using a single set of credentials.\n",
            "image": "https://developer.mozilla.org/mdn-social-share.d893525a4fb5fb1f67a2.png",
            "favicon": "https://developer.mozilla.org/favicon-48x48.bc390275e955dacb2e65.png",
            "categoryName": "Neutral",
            "categoryDescription": "Educational and vendor-neutral resources",
            "evaluation": {
              "justification": "Relevant and recent (2024), explains the role of IdPs in SSO.",
              "rating": 8
            }
          },
          {
            "id": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API",
            "title": "Web Authentication API - MDN Web Docs - Mozilla",
            "url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API",
            "publishedDate": "2024-06-05T00:00:00.000Z",
            "author": "",
            "text": "Secure context: This feature is available only in secure contexts (HTTPS), in some or all supporting browsers . \n The Web Authentication API (WebAuthn) is an extension of the Credential Management API that enables strong authentication with public key cryptography, enabling passwordless authentication and secure multi-factor authentication (MFA) without SMS texts. \n WebAuthn concepts and usage WebAuthn uses asymmetric (public-key) cryptography instead of passwords or SMS texts for registering, authenticating, and multi-factor authentication with websites. This has some benefits: \n \n Protection against phishing: An attacker who creates a fake login website can't login as the user because the signature changes with the origin of the website. \n Reduced impact of data breaches: Developers don't need to hash the public key, and if an attacker gets access to the public key used to verify the authentication, it can't authenticate because it needs the private key. \n Invulnerable to password attacks: Some users might reuse passwords, and an attacker may obtain the user's password for another website (e.g. via a data breach). Also, text passwords are much easier to brute-force than a digital signature. \n \n Many websites already have pages that allow users to register new accounts or sign into an existing account, and WebAuthn acts as a replacement or enhancement for the authentication part of the system. It extends the Credential Management API , abstracting communication between the user agent and an authenticator and providing the following new functionality: \n \n When navigator.credentials.create() is used with the publicKey option, the user agent creates new credentials via an authenticator — either for registering a new account or for associating a new asymmetric key pair with an existing account.\n \n When registering a new account, these credentials are stored on a server (also referred to as a service or a relying party ) and can be subsequently used to log a user in. \n The asymmetric key pair is stored in the authenticator, which can then be used to authenticate a user with a relying party for example during MFA. The authenticator may be embedded into the user agent, into an operating system, such as Windows Hello, or it may be a physical token, such as a USB or Bluetooth Security Key. \n \n \n When navigator.credentials.get() is used with the publicKey option, the user agent uses an existing set of credentials to authenticate to a relying party (either as the primary login or to provide an additional factor during MFA as described above). \n \n In their most basic forms, both create() and get() receive a very large random number called the \"challenge\" from the server and return the challenge signed by the private key back to the server. This proves to the server that a user has the private key required for authentication without revealing any secrets over the network. \n Note: The \"challenge\" must be a buffer of random information at least 16 bytes in size. Creating a key pair and registering a user To illustrate how the credential creation process works, let's describe the typical flow that occurs when a user wants to register a credential to a relying party: \n \n The relying party server sends user and relying party information to the web app handling the registration process, along with the \"challenge\", using an appropriate secure mechanism (for example Fetch or XMLHttpRequest ).\n \n Note: The format for sharing information between the relying party server and the web app is up to the application.\nA recommended approach is to exchange JSON type representation objects for credentials and credential options.\nConvenience methods have been created in PublicKeyCredential for converting from the JSON representations to the form required by the authentication APIs: parseCreationOptionsFromJSON() , parseRequestOptionsFromJSON() and PublicKeyCredential.toJSON() .\n \n \n \nThe web app initiates generation of a new credential via the authenticator, on behalf of the relying party, via a navigator.credentials.create() call. This call is passed a publicKey option specifying device capabilities, e.g., whether the device provides its own user authentication (for example with biometrics).\nA typical create() call might look like so:\n let credential = await navigator . credentials . create ( { \n publicKey : { \n challenge : new Uint8Array ( [ 117 , 61 , 252 , 231 , 191 , 241 , ... ] ) , \n rp : { id : \"acme.com\" , name : \"ACME Corporation\" } , \n user : { \n id : new Uint8Array ( [ 79 , 252 , 83 , 72 , 214 , 7 , 89 , 26 ] ) , \n name : \"jamiedoe\" , \n displayName : \"Jamie Doe\" \n } , \n pubKeyCredParams : [ { type : \"public-key\" , alg : - 7 } ] \n } \n } ) ; \n The parameters of the create() call are passed to the authenticator, along with a SHA-256 hash that is signed to ensure that it isn't tampered with.\n \n After the authenticator obtains user consent, it generates a key pair and returns the public key and optional signed attestation to the web app. This is provided when the Promise returned by the create() call fulfills, in the form of a PublicKeyCredential object instance (the PublicKeyCredential.response property contains the attestation information). \n The web app forwards the PublicKeyCredential to the server, again using an appropriate mechanism. \n The server stores the public key, coupled with the user identity, to remember the credential for future authentications. During this process, it performs a series of checks to ensure that the registration was complete and not tampered with. These include:\n \n Verifying that the challenge is the same as the challenge that was sent. \n Ensuring that the origin was the origin expected. \n Validating that the signature and attestation are using the correct certificate chain for the specific model of the authenticator used to generated the key par in the first place. \n \n \n \n Warning: Attestation provides a way for a relying party to determine the provenance of an authenticator. Relying parties should not attempt to maintain allowlists of authenticators. Authenticating a user After a user has registered with WebAuthn, they can authenticate (i.e., login) with the service. The authentication flow looks similar to the registration flow, the main differences being that authentication: \n \n Doesn't require user or relying party information \n Creates an assertion using the previously-generated key pair for the service, rather than the authenticator's key pair. \n \n A typical authentication flow is as follows: \n \n The relying party generates a \"challenge\" and sends it to the user agent using an appropriate secure mechanism, along with a list of relying party and user credentials. It can also indicate where to look for the credential, e.g., on a local built-in authenticator, or on an external one over USB, BLE, etc. \n \nThe browser asks the authenticator to sign the challenge via a navigator.credentials.get() call, which is passed the credentials in a publicKey option.\nA typical get() call might look like so:\n let credential = await navigator . credentials . get ( { \n publicKey : { \n challenge : new Uint8Array ( [ 139 , 66 , 181 , 87 , 7 , 203 , ... ] ) , \n rpId : \"acme.com\" , \n allowCredentials : [ { \n type : \"public-key\" , \n id : new Uint8Array ( [ 64 , 66 , 25 , 78 , 168 , 226 , 174 , ... ] ) \n } ] , \n userVerification : \"required\" , \n } \n } ) ; \n The parameters of the get() call are passed to the authenticator to handle the authentication.\n \n If the authenticator contains one of the given credentials and is able to successfully sign the challenge, it returns a signed assertion to the web app after receiving user consent. This is provided when the Promise returned by the get() call fulfills, in the form of a PublicKeyCredential object instance (the PublicKeyCredential.response property contains the assertion information). \n The web app forwards the signed assertion to the relying party server for the relying party to validate. The validation checks include:\n \n Using the public key that was stored during the registration request to validate the signature by the authenticator. \n Ensuring that the challenge that was signed by the authenticator matches the challenge that was generated by the server. \n Checking that the Relying Party ID is the one expected for this service. \n \n \n Once verified by the server, the authentication flow is considered successful. \n Controlling access to the API The availability of WebAuthn can be controlled using a Permissions Policy , specifying two directives in particular: \n \n publickey-credentials-create : Controls the availability of navigator.credentials.create() with the publicKey option. \n publickey-credentials-get : Controls the availability of navigator.credentials.get() with the publicKey option. \n \n \nBoth directives have a default allowlist value of \"self\" , meaning that by default these methods can be used in top-level document contexts.\nIn addition, get() can be used in nested browsing contexts loaded from the same origin as the top-most document.\n get() and create() can be used in nested browsing contexts loaded from the different origins to the top-most document (i.e. in cross-origin &lt;iframes&gt; ), if allowed by the publickey-credentials-get and publickey-credentials-create Permission-Policy directives, respectively.\nFor cross-origin create() calls, where the permission was granted by allow= on an iframe , the frame must also have Transient activation .\n \n Note: Where a policy forbids use of these methods, the promises returned by them will reject with a NotAllowedError DOMException . Basic access control If you wish to allow access to a specific subdomain only, you could provide it like this: \n Permissions-Policy : publickey-credentials-get=(\"https://subdomain.example.com\") \n Permissions-Policy : publickey-credentials-create=(\"https://subdomain.example.com\") \n Allowing embedded create and get() calls in an &lt;iframe&gt; If you wish to authenticate with get() or create() in an &lt;iframe&gt; , there are a couple of steps to follow: \n \n The site embedding the relying party site must provide permission via an allow attribute:\n \n If using get() :\n &lt; iframe \n src = \" https://auth.provider.com \" \n allow = \" publickey-credentials-get * \" &gt; \n &lt;/ iframe &gt; \n \n \n If using create() :\n &lt; iframe \n src = \" https://auth.provider.com \" \n allow = \" publickey-credentials-create 'self' https://a.auth.provider.com https://b.auth.provider.com \" &gt; \n &lt;/ iframe &gt; \n The &lt;iframe&gt; must also have Transient activation if create() is called cross-origin.\n \n \n \n The relying party site must provide permission for the above access via a Permissions-Policy header:\n Permissions-Policy : publickey-credentials-get=* \n Permissions-Policy : publickey-credentials-create=* \n Or to allow only a specific URL to embed the relying party site in an &lt;iframe&gt; :\n Permissions-Policy : publickey-credentials-get=(\"https://subdomain.example.com\") \n Permissions-Policy : publickey-credentials-create=(\"https://*.auth.provider.com\") \n \n \n Interfaces \n AuthenticatorAssertionResponse \n \n Provides proof to a service that an authenticator has the necessary key pair to successfully handle an authentication request initiated by a CredentialsContainer.get() call. Available in the response property of the PublicKeyCredential instance obtained when the get() Promise fulfills. \n \n AuthenticatorAttestationResponse \n \n The result of a WebAuthn credential registration (i.e., a CredentialsContainer.create() call). It contains information about the credential that the server needs to perform WebAuthn assertions, such as its credential ID and public key. Available in the response property of the PublicKeyCredential instance obtained when the create() Promise fulfills. \n \n AuthenticatorResponse \n \n The base interface for AuthenticatorAttestationResponse and AuthenticatorAssertionResponse . \n \n PublicKeyCredential \n \n Provides information about a public key / private key pair, which is a credential for logging in to a service using an un-phishable and data-breach resistant asymmetric key pair instead of a password. Obtained when the Promise returned via a create() or get() call fulfills. \n \n Extensions to other interfaces \n CredentialsContainer.create() , the publicKey option \n \n Calling create() with a publicKey option initiates the creation of new asymmetric key credentials via an authenticator, as explained above. \n \n CredentialsContainer.get() , the publicKey option \n \n Calling get() with a publicKey option instructs the user agent uses an existing set of credentials to authenticate to a relying party. \n \n Examples Demo sites Usage example Note: For security reasons, the Web Authentication API calls ( create() and get() ) are canceled if the browser window loses focus while the call is pending. \n // sample arguments for registration \n const createCredentialDefaultArgs = { \n publicKey : { \n // Relying Party (a.k.a. - Service): \n rp : { \n name : \"Acme\" , \n } , \n // User: \n user : { \n id : new Uint8Array ( 16 ) , \n name : \"carina.p.anand@example.com\" , \n displayName : \"Carina P. Anand\" , \n } , \n pubKeyCredParams : [ \n { \n type : \"public-key\" , \n alg : - 7 , \n } , \n ] , \n attestation : \"direct\" , \n timeout : 60000 , \n challenge : new Uint8Array ( [ \n // must be a cryptographically random number sent from a server \n 0x8c , 0x0a , 0x26 , 0xff , 0x22 , 0x91 , 0xc1 , 0xe9 , 0xb9 , 0x4e , 0x2e , 0x17 , \n 0x1a , 0x98 , 0x6a , 0x73 , 0x71 , 0x9d , 0x43 , 0x48 , 0xd5 , 0xa7 , 0x6a , 0x15 , \n 0x7e , 0x38 , 0x94 , 0x52 , 0x77 , 0x97 , 0x0f , 0xef , \n ] ) . buffer , \n } , \n } ; \n // sample arguments for login \n const getCredentialDefaultArgs = { \n publicKey : { \n timeout : 60000 , \n // allowCredentials: [newCredential] // see below \n challenge : new Uint8Array ( [ \n // must be a cryptographically random number sent from a server \n 0x79 , 0x50 , 0x68 , 0x71 , 0xda , 0xee , 0xee , 0xb9 , 0x94 , 0xc3 , 0xc2 , 0x15 , \n 0x67 , 0x65 , 0x26 , 0x22 , 0xe3 , 0xf3 , 0xab , 0x3b , 0x78 , 0x2e , 0xd5 , 0x6f , \n 0x81 , 0x26 , 0xe2 , 0xa6 , 0x01 , 0x7d , 0x74 , 0x50 , \n ] ) . buffer , \n } , \n } ; \n // register / create a new credential \nnavigator . credentials\n . create ( createCredentialDefaultArgs ) \n . then ( ( cred ) =&gt; { \nconsole . log ( \"NEW CREDENTIAL\" , cred ) ; \n // normally the credential IDs available for an account would come from a server \n // but we can just copy them from above… \n const idList = [ \n { \n id : cred . rawId , \n transports : [ \"usb\" , \"nfc\" , \"ble\" ] , \n type : \"public-key\" , \n } , \n ] ; \ngetCredentialDefaultArgs . publicKey . allowCredentials = idList ; \n return navigator . credentials . get ( getCredentialDefaultArgs ) ; \n } ) \n . then ( ( assertion ) =&gt; { \nconsole . log ( \"ASSERTION\" , assertion ) ; \n } ) \n . catch ( ( err ) =&gt; { \nconsole . log ( \"ERROR\" , err ) ; \n } ) ; \n Specifications Specification Web Authentication: An API for accessing Public Key Credentials - Level 3 # iface-pkcredential Browser compatibility BCD tables only load in the browser",
            "summary": "The Web Authentication API (WebAuthn) uses public-key cryptography for strong authentication, enabling passwordless login and multi-factor authentication (MFA).  While not explicitly a single-sign-on (SSO) solution itself, WebAuthn enhances security for existing login systems.  It protects against phishing and data breaches by using digital signatures tied to the website's origin, and it's resistant to password attacks.  WebAuthn's `navigator.credentials.create()` and `navigator.credentials.get()` methods handle credential creation and retrieval, respectively, using authenticators like security keys or OS features (e.g., Windows Hello).  This improves the security of the authentication process, which can be integrated into existing SSO systems to bolster their security.\n",
            "image": "https://developer.mozilla.org/mdn-social-share.cd6c4a5a.png",
            "favicon": "https://developer.mozilla.org/favicon-48x48.cbbd161b.png",
            "categoryName": "Neutral",
            "categoryDescription": "Educational and vendor-neutral resources",
            "evaluation": {
              "justification": "Relevant and recent (2024), explains how WebAuthn enhances SSO security.",
              "rating": 8
            }
          }
        ]
      },
      {
        "category": "Google",
        "description": "General search results without domain restrictions",
        "domains": [],
        "results": [
          {
            "id": "https://en.wikipedia.org/wiki/Single_sign-on",
            "title": "Single sign-on - Wikipedia",
            "url": "https://en.wikipedia.org/wiki/Single_sign-on",
            "publishedDate": "2024-06-05T07:13:50.000Z",
            "author": "Contributors to Wikimedia projects",
            "text": "From Wikipedia, the free encyclopedia \n \n Single sign-on ( SSO ) is an authentication scheme that allows a user to log in with a single ID to any of several related, yet independent, software systems.\n True single sign-on allows the user to log in once and access services without re-entering authentication factors.\n It should not be confused with same-sign on (Directory Server Authentication), often accomplished by using the Lightweight Directory Access Protocol (LDAP) and stored LDAP databases on (directory) servers. [1] [2] \n A simple version of single sign-on can be achieved over IP networks using cookies but only if the sites share a common DNS parent domain. [3] \n For clarity, a distinction is made between Directory Server Authentication (same-sign on) and single sign-on: Directory Server Authentication refers to systems requiring authentication for each application but using the same credentials from a directory server, whereas single sign-on refers to systems where a single authentication provides access to multiple applications by passing the authentication token seamlessly to configured applications.\n Conversely, single sign-off or single log-out ( SLO ) is the property whereby a single action of signing out terminates access to multiple software systems.\n As different applications and resources support different authentication mechanisms, single sign-on must internally store the credentials used for initial authentication and translate them to the credentials required for the different mechanisms.\n Other shared authentication schemes, such as OpenID and OpenID Connect , offer other services that may require users to make choices during a sign-on to a resource, but can be configured for single sign-on if those other services (such as user consent) are disabled. [4] An increasing number of federated social logons, like Facebook Connect , do require the user to enter consent choices upon first registration with a new resource, and so are not always single sign-on in the strictest sense.\n \n Benefits [ edit ] \n Benefits of using single sign-on include:\n \n Mitigate risk for access to 3rd-party sites (\"federated authentication\") [5] because user passwords are not stored or managed externally \n Reduce password fatigue from different username and password combinations \n Reduce time spent re-entering passwords for the same identity [5] \n Reduce IT costs due to lower number of IT help desk calls about passwords [6] \n Simpler administration. SSO-related tasks are performed transparently as part of normal maintenance, using the same tools that are used for other administrative tasks. \n Better administrative control. All network management information is stored in a single repository. This means that there is a single, authoritative listing of each user's rights and privileges. This allows the administrator to change a user's privileges and know that the results will propagate network wide. \n Improved user productivity. Users are no longer bogged down by multiple logons, nor are they required to remember multiple passwords in order to access network resources. This is also a benefit to Help desk personnel, who need to field fewer requests for forgotten passwords. \n Better network security. Eliminating multiple passwords also reduces a common source of security breaches—users writing down their passwords. Finally, because of the consolidation of network management information, the administrator can know with certainty that when he disables a user's account, the account is fully disabled. \n Consolidation of heterogeneous networks. By joining disparate networks, administrative efforts can be consolidated, ensuring that administrative best practices and corporate security policies are being consistently enforced. \n SSO shares centralized authentication servers that all other applications and systems use for authentication purposes and combines this with techniques to ensure that users do not have to actively enter their credentials more than once.\n \n Criticism [ edit ] \n The term reduced sign-on (RSO) has been used by some to reflect the fact that single sign-on is impractical in addressing the need for different levels of secure access in the enterprise, and as such more than one authentication server may be necessary. [7] \n As single sign-on provides access to many resources once the user is initially authenticated (\"keys to the castle\"), it increases the negative impact in case the credentials are available to other people and misused. Therefore, single sign-on requires an increased focus on the protection of the user credentials, and should ideally be combined with strong authentication methods like smart cards and one-time password tokens. [7] \n Single sign-on also increases dependence on highly-available authentication systems; a loss of their availability can result in denial of access to all systems unified under the SSO. SSO can be configured with session failover capabilities in order to maintain the system operation. [8] Nonetheless, the risk of system failure may make single sign-on undesirable for systems to which access must be guaranteed at all times, such as security or plant-floor systems.\n Furthermore, the use of single-sign-on techniques utilizing social networking services such as Facebook may render third party websites unusable within libraries, schools, or workplaces that block social media sites for productivity reasons. It can also cause difficulties in countries with active censorship regimes, such as China and its \" Golden Shield Project \", where the third party website may not be actively censored, but is effectively blocked if a user's social login is blocked. [9] [10] \n \n Security [ edit ] \n In March 2012, [11] a research paper reported an extensive study on the security of social login mechanisms. The authors found 8 serious logic flaws in high-profile ID providers and relying party websites, such as OpenID (including Google ID and PayPal Access), Facebook , Janrain , Freelancer , FarmVille , and Sears.com . Because the researchers informed ID providers and relying party websites prior to public announcement of the discovery of the flaws, the vulnerabilities were corrected, and there have been no security breaches reported. [12] \n In May 2014, a vulnerability named Covert Redirect was disclosed. [13] It was first reported \"Covert Redirect Vulnerability Related to OAuth 2.0 and OpenID\" by its discoverer Wang Jing, a Mathematical PhD student from Nanyang Technological University , Singapore. [14] [15] [16] In fact, almost all [ weasel words ] Single sign-on protocols are affected. Covert Redirect takes advantage of third-party clients susceptible to an XSS or Open Redirect. [17] \n In December 2020, flaws in federated authentication systems were discovered to have been utilized by attackers during the 2020 United States federal government data breach . [18] [19] \n Due to how single sign-on works, by sending a request to the logged-in website to get a SSO token and sending a request with the token to the logged-out website, the token cannot be protected with the HttpOnly cookie flag and thus can be stolen by an attacker if there is an XSS vulnerability on the logged-out website, in order to do session hijacking . Another security issue is that if the session used for SSO is stolen (which can be protected with the HttpOnly cookie flag unlike the SSO token), the attacker can access all the websites that are using the SSO system. [20] \n \n Privacy [ edit ] \n As originally implemented in Kerberos and SAML, single sign-on did not give users any choices about releasing their personal information to each new resource that the user visited. This worked well enough within a single enterprise, like MIT where Kerberos was invented, or major corporations where all of the resources were internal sites. However, as federated services like Active Directory Federation Services proliferated, the user's private information was sent out to affiliated sites not under control of the enterprise that collected the data from the user. Since privacy regulations are now tightening with legislation like the GDPR , the newer methods like OpenID Connect have started to become more attractive; for example MIT, the originator of Kerberos, now supports OpenID Connect . [21] \n \n Email address [ edit ] \n Single sign-on in theory can work without revealing identifying information such as email addresses to the relying party (credential consumer), but many credential providers do not allow users to configure what information is passed on to the credential consumer. As of 2019, Google and Facebook sign-in do not require users to share email addresses with the credential consumer. \" Sign in with Apple \" introduced in iOS 13 allows a user to request a unique relay email address each time the user signs up for a new service, thus reducing the likelihood of account linking by the credential consumer. [22] \n \n Common configurations [ edit ] \n Kerberos-based [ edit ] \n Initial sign-on prompts the user for credentials, and gets a Kerberos ticket-granting ticket (TGT). \n Additional software applications requiring authentication, such as email clients , wikis , and revision-control systems, use the ticket-granting ticket to acquire service tickets, proving the user's identity to the mail-server / wiki server / etc. without prompting the user to re-enter credentials. \n Windows environment - Windows login fetches TGT. Active Directory -aware applications fetch service tickets, so the user is not prompted to re-authenticate.\n Unix / Linux environment - Login via Kerberos PAM modules fetches TGT. Kerberized client applications such as Evolution , Firefox , and SVN use service tickets, so the user is not prompted to re-authenticate.\n \n Smart-card-based [ edit ] \n Initial sign-on prompts the user for the smart card . Additional software applications also use the smart card, without prompting the user to re-enter credentials. Smart-card-based single sign-on can either use certificates or passwords stored on the smart card.\n \n Integrated Windows Authentication [ edit ] \n Integrated Windows Authentication is a term associated with Microsoft products and refers to the SPNEGO , Kerberos , and NTLMSSP authentication protocols with respect to SSPI functionality introduced with Microsoft Windows 2000 and included with later Windows NT -based operating systems. The term is most commonly used to refer to the automatically authenticated connections between Microsoft Internet Information Services and Internet Explorer . Cross-platform Active Directory integration vendors have extended the Integrated Windows Authentication paradigm to Unix (including Mac) and Linux systems.\n \n Security Assertion Markup Language [ edit ] \n Security Assertion Markup Language (SAML) is an XML -based method for exchanging user security information between an SAML identity provider and a SAML service provider . SAML 2.0 supports W3C XML encryption and service-provider–initiated web browser single sign-on exchanges. [23] A user wielding a user agent (usually a web browser) is called the subject in SAML-based single sign-on. The user requests a web resource protected by a SAML service provider. The service provider, wishing to know the identity of the user, issues an authentication request to a SAML identity provider through the user agent. The identity provider is the one that provides the user credentials. The service provider trusts the user information from the identity provider to provide access to its services or resources.\n \n Emerging configurations [ edit ] \n Mobile devices as access credentials [ edit ] \n A newer variation of single-sign-on authentication has been developed using mobile devices as access credentials. Users' mobile devices can be used to automatically log them onto multiple systems, such as building-access-control systems and computer systems, through the use of authentication methods which include OpenID Connect and SAML, [24] in conjunction with an X.509 ITU-T cryptography certificate used to identify the mobile device to an access server.\n A mobile device is \"something you have\", as opposed to a password which is \"something you know\", or biometrics (fingerprint, retinal scan, facial recognition, etc.) which is \"something you are\". Security experts recommend using at least two out of these three factors ( multi-factor authentication ) for best protection.\n \n See also [ edit ] \n Account pre-hijacking \n Central Authentication Service \n Identity management \n Identity management systems \n List of single sign-on implementations \n Password manager \n Security Assertion Markup Language \n Usability of web authentication systems \n References [ edit ] \n \n ^ \"What's the Difference b/w SSO (Single Sign On) &amp; LDAP?\" . JumpCloud . 2019-05-14 . Retrieved 2020-10-27 . \n \n ^ \"SSO and LDAP Authentication\" . Authenticationworld.com. Archived from the original on 2014-05-23 . Retrieved 2014-05-23 . \n \n ^ \"OpenID versus Single-Sign-On Server\" . alleged.org.uk. 2007-08-13 . Retrieved 2014-05-23 . \n \n ^ \"OpenID Connect Provider - OpenID Connect Single Sign-On (SSO) - OIDC OAuth Authentication\" . OneLogin . \n \n ^ a b \"Single sign-on and federated authentication\" . kb.iu.edu . \n \n ^ \"Benefits of SSO\" . University of Guelph . Retrieved 2014-05-23 . \n \n ^ a b \"Single Sign On Authentication\" . Authenticationworld.com. Archived from the original on 2014-03-15 . Retrieved 2013-05-28 . \n \n ^ \"Sun GlassFish Enterprise Server v2.1.1 High Availability Administration Guide\" . Oracle.com . Retrieved 2013-05-28 . \n \n ^ Laurenson, Lydia (3 May 2014). \"The Censorship Effect\" . TechCrunch . Archived from the original on August 7, 2020 . Retrieved 27 February 2015 . \n \n ^ Chester, Ken (12 August 2013). \"Censorship, external authentication, and other social media lessons from China's Great Firewall\" . Tech in Asia . Archived from the original on March 26, 2014 . Retrieved 9 March 2016 . \n \n ^ Wang, Rui; Chen, Shuo; Wang, XiaoFeng (2012). \"Signing Me onto Your Accounts through Facebook and Google: A Traffic-Guided Security Study of Commercially Deployed Single-Sign-On Web Services\" . 2012 IEEE Symposium on Security and Privacy . pp. 365–379. doi : 10.1109/SP.2012.30 . ISBN 978-1-4673-1244-8 . S2CID 1679661 . \n \n ^ \"OpenID: Vulnerability report, Data confusion\" - OpenID Foundation, March 14, 2012 \n \n ^ \"Facebook, Google Users Threatened by New Security Flaw\" . Tom's Guide. 2 May 2014 . Retrieved 11 November 2014 . \n \n ^ \"Covert Redirect Vulnerability Related to OAuth 2.0 and OpenID\" . Tetraph. 1 May 2014 . Retrieved 10 November 2014 . \n \n ^ \"Math student detects OAuth, OpenID security vulnerability\" . Tech Xplore. 3 May 2014 . Retrieved 10 November 2014 . \n \n ^ \"Facebook, Google Users Threatened by New Security Flaw\" . Yahoo. 2 May 2014 . Retrieved 10 November 2014 . \n \n ^ \"Covert Redirect Flaw in OAuth is Not the Next Heartbleed\" . Symantec. 3 May 2014 . Retrieved 10 November 2014 . \n \n ^ \"VMware Flaw a Vector in SolarWinds Breach? — Krebs on Security\" . 19 December 2020. \n \n ^ Kovacs, Eduard (15 December 2020). \"Group Behind SolarWinds Hack Bypassed MFA to Access Emails at US Think Tank\" . Security Week . Retrieved 19 December 2020 . \n \n ^ \"What Is Session Hijacking?\" . 22 August 2019. \n \n ^ MIT IST. \"OpenID Connect Authorization\" . \n \n ^ Goode, Lauren (2019-06-15). \"App Makers Are Mixed on 'Sign In With Apple' \" . Wired . ISSN 1059-1028 . Retrieved 2019-06-15 . \n \n ^ Armando, Alessandro; Carbone, Roberto; Compagna, Luca; Cuéllar, Jorge; Pellegrino, Giancarlo; Sorniotti, Alessandro (2013-03-01). \"An authentication flaw in browser-based Single Sign-On protocols: Impact and remediations\" . Computers &amp; Security . 33 : 41–58. doi : 10.1016/j.cose.2012.08.007 . \n \n ^ \"MicroStrategy's office of the future includes mobile identity and cybersecurity\" . The Washington Post . 2014-04-14 . Retrieved 2014-03-30 . \n \n \n External links [ edit ] \n Single sign-on intro with diagrams",
            "summary": "Single sign-on (SSO) is an authentication method letting users access multiple related systems with one login.  It avoids repeatedly entering credentials and offers benefits like reduced password fatigue, lower IT help desk calls, and simpler administration.  SSO can be implemented using cookies (if sites share a common DNS domain), but more complex systems are needed for applications with different authentication mechanisms.  While similar, SSO differs from Directory Server Authentication, which uses the same credentials across systems but still requires authentication for each.  Systems like OpenID and Facebook Connect offer related services, but may not always qualify as strict SSO due to additional steps like consent.  A related concept is single sign-off (SLO), which terminates access to multiple systems simultaneously.\n",
            "favicon": "https://en.wikipedia.org/static/apple-touch/wikipedia.png",
            "categoryName": "Google",
            "categoryDescription": "General search results without domain restrictions",
            "evaluation": {
              "justification": "Relevant and recent (2024), provides a good overview of SSO.",
              "rating": 9
            }
          },
          {
            "id": "https://www.onelogin.com/learn/how-single-sign-on-works",
            "title": "How Does Single Sign-On (SSO) Work? | OneLogin",
            "url": "https://www.onelogin.com/learn/how-single-sign-on-works",
            "publishedDate": "2024-08-04T00:00:00.000Z",
            "author": "",
            "text": "What is Single Sign-On? \n Single sign-on (SSO) is an authentication method that enables users to securely authenticate with multiple applications and websites by using just one set of credentials. \n \n \n How Does SSO Work? \n SSO works based upon a trust relationship set up between an application, known as the service provider, and an identity provider, like OneLogin. This trust relationship is often based upon a certificate that is exchanged between the identity provider and the service provider. This certificate can be used to sign identity information that is being sent from the identity provider to the service provider so that the service provider knows it is coming from a trusted source. In SSO, this identity data takes the form of tokens which contain identifying bits of information about the user like a user’s email address or a username. The login flow usually looks like this: A user browses to the application or website they want access to, aka, the Service Provider. The Service Provider sends a token that contains some information about the user, like their email address, to the SSO system, aka, the Identity Provider, as part of a request to authenticate the user. The Identity Provider first checks to see whether the user has already been authenticated, in which case it will grant the user access to the Service Provider application and skip to step 5. If the user hasn’t logged in, they will be prompted to do so by providing the credentials required by the Identity Provider. This could simply be a username and password or it might include some other form of authentication like a One-Time Password (OTP) . Once the Identity Provider validates the credentials provided, it will send a token back to the Service Provider confirming a successful authentication. This token is passed through the user’s browser to the Service Provider. The token that is received by the Service Provider is validated according to the trust relationship that was set up between the Service Provider and the Identity Provider during the initial configuration. The user is granted access to the Service Provider. When the user tries to access a different website, the new website would have to have a similar trust relationship configured with the SSO solution and the authentication flow would follow the same steps. \n \n \n \n \n What is an SSO Token? \n An SSO token is a collection of data or information that is passed from one\nsystem to another during the SSO process. The data can simply be a\nuser’s email address and information about which system is sending the\ntoken. Tokens must be digitally signed for the token receiver to verify that\nthe token is coming from a trusted source. The certificate that is used for\nthis digital signature is exchanged during the initial configuration process. \n \n Is SSO Secure? \n The answer to this question is “It depends.” There are many reasons why SSO can improve security. A single sign-on solution can simplify username and password management for both users and administrators. Users no longer have to keep track of different sets of credentials and can simply remember a single more complex password. SSO often enables users to just get access to their applications much faster. SSO can also cut down on the amount of time the help desk has to spend on assisting users with lost passwords. Administrators can centrally control requirements like password complexity and multi-factor authentication (MFA) . Administrators can also more quickly relinquish login privileges across the board when a user leaves the organization. Single Sign-On does have some drawbacks. For example, you might have applications that you want to have locked down a bit more. For this reason, it would be important to choose an SSO solution that gives you the ability to, say, require an additional authentication factor before a user logs into a particular application or that prevents users from accessing certain applications unless they are connected to a secure network. \n \n How is SSO Implemented? \n The specifics on how an SSO solution is implemented will differ depending on what exact SSO solution you are working with. But no matter what the specific steps are, you need to make sure you have set clear objectives and goals for your implementation. Make sure you answer the following questions: What different types of users are you serving and what are their different requirements? Are you looking for an On Prem solution or a Cloud Based solution? Will this solution be able to grow with your company and your needs? What features are you looking for to ensure only trusted users are logging in? MFA, Adaptive Authentication, Device Trust, IP Address Whitelisting, etc.? What systems do you need to integrate with? Do you need API access? \n \n What Makes a True SSO System? \n It’s important to understand the difference between single sign-on and password vaulting or password managers, which are sometimes referred to as SSO which can mean Same Sign-on not Single Sign-on. With password vaulting, you may have the same username and password, but they need to be entered each time you move to a different application or website. The password vaulting system is simply storing your credentials for all the different applications and inserting them when necessary. There is no trust relationship set up between the applications and the password vaulting system. With SSO, meaning Single Sign-On, after you’re logged in via the SSO solution, you can access all company-approved applications and websites without having to log in again. That includes cloud applications as well as on-prem applications, often available through an SSO portal (also called a login portal). \n \n What is an SSO Software vs an SSO Solution \n When researching SSO options that are available, you might see them sometimes referred to as SSO software vs an SSO solution vs an SSO provider. In many cases, the difference might simply be in the way the companies have categorized themselves. A piece of software suggests something that is installed on-premise. It is usually designed to do a specific set of tasks and nothing else. A solution suggests that there is the ability to expand or customize the capabilities of the core product. A provider would be a way to refer to the company that is producing or hosting the solution. For example, OneLogin is known as an SSO solution provider. \n \n \n Are There Different Types of SSO? \n There are a lot of terms that are used when we talk about Single Sign-On (SSO). Federated Identity Management (FIM) OAuth (specifically OAuth 2.0 nowadays) OpenID Connect (OIDC) Security Access Markup Language (SAML) Same Sign On (SSO) SSO is actually a part of a larger concept called Federated Identity Management, thus sometimes SSO is referred to as federated SSO. FIM just refers to a trust relationship that is created between two or more domains or identity management systems. Single Sign-on is often a feature that is available within a FIM architecture. OAuth 2.0 is a specific framework that could also be considered part of a FIM architecture. OAuth focuses on that trusted relationship allowing user identity information to be shared across the domains. OpenID Connect (OIDC) is an authentication layer that was built on top of OAuth 2.0 to provide Single Sign-on functionality. Same Sign On which is also often referred to as SSO is actually not the same as Single Sign-on because it doesn’t involve any trust relationship between the entities that are doing the authentication. It is more dependent on credentials being duplicated between systems and simply passing in those credentials when necessary. It is not as secure as any of the Single Sign-on solutions. There are also some specific systems that commonly come up when we are discussing Single Sign-on: Active Directory, Active Directory Federation Services (ADFS) and Lightweight Directory Access Protocol (LDAP). Active Directory, which nowadays is specifically referred to as Active Directory Directory Services (ADDS), is Microsoft’s centralized directory service. Users and resources are added to the directory service for central management and ADDS works with authentication protocols like NTLM and Kerberos. Thus, users that belong to ADDS can authenticate from their machines and get access to others systems that integrate with ADDS. This is a form of Single Sign-on. Active Directory Federation Services (ADFS) is a type of Federated Identity Management system that also provides Single Sign-on capabilities. It supports both SAML and OIDC. ADFS is primarily used to set up trust between ADDS and other systems such as Azure AD or other ADDS forests. Lightweight Directory Access Protocol (LDAP) is simply an industry standard that defines a way to organize and query directory information. LDAP allows you to centrally manage resources like users and systems. LDAP, however, does not define how you log into those systems, meaning it does not define the actual protocols that are used in authentication. It is, however, often used as part of the authentication process and access control processes. For example, before a user can access a particular resource, LDAP might be used to query for that user and any groups that they belong to in order to see if the user has access to that resource. LDAP solutions like OpenLDAP do provide authentication through their support of authentication protocols like Simple Authentication and Security Layer (SASL) \n \n \n \n \n What is SSO Software as a Service? \n Just as many other applications have moved to run within the Internet, so has SSO functionality. Platforms like OneLogin that run in the cloud can then be categorized as a Software as a Service (SaaS) SSO solution. \n \n What is App-to-App SSO? \n Lastly, you might have heard of App-to-App or Application-to-Application SSO. This is not quite an industry standard yet. It is more of a term that has been used by SAPCloud to describe the process of passing a user identity from one application to another within their ecosystem. It is somewhat similar to OAuth 2.0 but again it is not a standard protocol or method and is currently specific to SAPCloud.",
            "summary": "Single sign-on (SSO) is an authentication method letting users access multiple applications and websites using one set of credentials.  It works through a trust relationship between a service provider (the application) and an identity provider (like OneLogin).  The identity provider verifies the user's credentials (often username and password, sometimes including multi-factor authentication).  If authenticated, a token containing user information is sent to the service provider, granting access.  This process repeats for each website with a similar trust relationship configured.  While SSO simplifies access and improves security by centralizing password management and enabling stronger password policies, its security depends on the implementation.\n",
            "image": "https://www.onelogin.com/images/og/OneLogin_159085.jpg",
            "categoryName": "Google",
            "categoryDescription": "General search results without domain restrictions",
            "evaluation": {
              "justification": "Relevant and recent (2024), explains how SSO works using an identity provider.",
              "rating": 9
            }
          },
          {
            "id": "https://www.cloudflare.com/learning/access-management/what-is-sso/",
            "title": "What is SSO? | How single sign-on works - Cloudflare",
            "url": "https://www.cloudflare.com/learning/access-management/what-is-sso/",
            "publishedDate": "2024-01-01T00:00:00.000Z",
            "author": "",
            "text": "What is single sign-on (SSO)? \n Single sign-on (SSO) is a technology which combines several different application login screens into one. With SSO, a user only has to enter their login credentials (username, password, etc.) one time on a single page to access all of their SaaS applications. \n SSO is often used in a business context, when user applications are assigned and managed by an internal IT team. Remote workers who use SaaS applications also benefit from using SSO. \n Imagine if customers who had already been admitted to a bar were asked to show their identification card to prove their age each time they attempted to purchase additional alcoholic beverages. Some customers would quickly become frustrated with the continual checks and might even attempt to circumvent these measures by sneaking in their own beverages. \n However, most establishments will only check a customer's identification once, and then serve the customer several drinks over the course of an evening. This is somewhat like an SSO system: instead of establishing their identity over and over, a user establishes their identity once and can then access several different services. \n SSO is an important aspect of many identity and access management (IAM) or access control solutions. User identity verification is crucial for knowing which permissions each user should have. Cloudflare Zero Trust is one example of an access control solution that integrates with SSO solutions for managing users' identities. \n \n \n Article \n Elevating organizational trust with Zero Trust \n \n \n Guide \n The Zero Trust guide to securing aplication access \n \n \n What are the advantages of SSO? \n In addition to being much simpler and more convenient for users, SSO is widely considered to be more secure. This may seem counterintuitive: how can signing in once with one password, instead of multiple times with multiple passwords, be more secure? Proponents of SSO cite the following reasons: \n \n \n Stronger passwords: Since users only have to use one password, SSO makes it easier for them to create, remember, and use stronger passwords.* In practice, this is typically the case: most users do use stronger passwords with SSO.\n \n *What makes a password \"strong\"? A strong password is not easily guessed and is random enough that a brute force attack is not likely to succeed. w7:g\"5h$G@ is a fairly strong password; password123 is not. \n No repeated passwords: When users have to remember passwords for several different apps and services, a condition known as \"password fatigue\" is likely to set in: users will re-use passwords across services. Using the same password across several services is a huge security risk because it means that all services are only as secure as the service with the weakest password protection: if that service's password database is compromised, attackers can use the password to hack all of the user's other services as well. SSO eliminates this scenario by reducing all logins down to one login. \n Better password policy enforcement: With one place for password entry, SSO provides a way for IT teams to easily enforce password security rules. For example, some companies require users to reset their passwords periodically. With SSO, password resets are easier to implement: instead of constant password resets across a number of different apps and services, users only have one password to reset. (While the value of regular password resets has been called into question , some IT teams still consider them an important part of their security strategy.) \n Multi-factor authentication: Multi-factor authentication , or MFA, refers to the use of more than one identity factor to authenticate a user . For example, in addition to entering a username and password, a user might have to connect a USB device or enter a code that appears on their smartphone. Possession of this physical object is a second \"factor\" that establishes the user is who they say they are. MFA is much more secure than relying on a password alone. SSO makes it possible to activate MFA at a single point instead of having to activate it for three, four, or several dozen apps, which may not be feasible. \n Single point for enforcing password re-entry: Administrators can enforce re-entering credentials after a certain amount of time to make sure that the same user is still active on the signed-in device. With SSO, they have a central place from which to do this for all internal apps, instead of having to enforce it across multiple different apps, which some apps may not support. \n Internal credential management instead of external storage: Usually, user passwords are stored remotely in an unmanaged fashion by applications and services that may or may not follow best security practices. With SSO, however, they are stored internally in an environment that an IT team has more control over. \n Less time wasted on password recovery: In addition to the above security benefits, SSO also cuts down on wasted time for internal teams. IT has to spend less time on helping users recover or reset their passwords for dozens of apps, and users spend less time signing into various apps to perform their jobs. This has the potential to increase business productivity. \n \n How does an SSO login work? \n Whenever a user signs in to an SSO service, the service creates an authentication token that remembers that the user is verified. An authentication token is a piece of digital information stored either in the user's browser or within the SSO service's servers, like a temporary ID card issued to the user. Any app the user accesses will check with the SSO service. The SSO service passes the user's authentication token to the app and the user is allowed in. If, however, the user has not yet signed in, they will be prompted to do so through the SSO service. \n An SSO service does not necessarily remember who a user is, since it does not store user identities. Most SSO services work by checking user credentials against a separate identity management service. \n Think of SSO as a go-between that can confirm whether a user's login credentials match with their identity in the database, without managing the database themselves — somewhat like when a librarian looks up a book on someone else's behalf based on the title of the book. The librarian does not have the entire library card catalog memorized, but they can access it easily. \n How do SSO authentication tokens work? \n The ability to pass an authentication token to external apps and services is crucial in the SSO process. This is what enables identity verification to take place separately from other cloud services, making SSO possible. \n Think of an exclusive event that only a few people are allowed into. One way to indicate that the guards at the entrance to the event have checked and approved a guest is to stamp each guest's hand. Event staff can check the stamps of every guest to make sure they are allowed to be there. However, not just any stamp will do; event staff will know the exact shape and color of the stamp used by the guards at the entrance. \n Just as each stamp has to look the same, authentication tokens have their own communication standards to ensure that they are correct and legitimate. The main authentication token standard is called SAML (Security Assertion Markup Language) . Similar to how webpages are written in HTML (Hypertext Markup Language), authentication tokens are written in SAML. \n How does SSO fit into an access management strategy? \n SSO is only one aspect of managing user access. It must be combined with access control, permission control, activity logs, and other measures for tracking and controlling user behavior within an organization's internal systems. SSO is a crucial element of access management, however. If a system does not know who a user is, there is no way to allow or restrict that user's actions. \n Does Cloudflare integrate with SSO solutions? \n Cloudflare Zero Trust controls and secures user access to applications and websites; it can act as a replacement for most VPNs . Cloudflare integrates with SSO providers in order to identify users and enforce their assigned access permissions.",
            "summary": "Single sign-on (SSO) is a technology that combines multiple application logins into one.  Users enter their credentials once to access all their SaaS applications.  This is more convenient and often considered more secure than using multiple passwords, because it encourages stronger passwords, prevents password reuse (a major security risk), and allows IT teams to more easily enforce password policies.  SSO is a key component of many identity and access management (IAM) and access control solutions.\n",
            "image": "https://cf-assets.www.cloudflare.com/slt3lc6tev37/53qCYhQbir5WtIU0VDWESo/954a48bfb17f429acf469e5f14345d83/unnamed-3.png",
            "categoryName": "Google",
            "categoryDescription": "General search results without domain restrictions",
            "evaluation": {
              "justification": "Relevant and recent (2024), explains SSO and its benefits.",
              "rating": 9
            }
          },
          {
            "id": "https://www.techtarget.com/searchsecurity/definition/single-sign-on",
            "title": "What is Single Sign-On (SSO) and How Does It Work? - TechTarget",
            "url": "https://www.techtarget.com/searchsecurity/definition/single-sign-on",
            "publishedDate": "2024-06-17T19:01:06.000Z",
            "author": "Taina Teravainen",
            "text": "What is single sign-on (SSO)? \n Single sign-on (SSO) is a session and user authentication service that permits a user to use one set of login credentials -- for example, a username and password -- to access multiple applications. SSO is used by organizations of all sizes and individuals to ease the management of multiple credentials. \n \n \n Single sign-on enables users to authenticate with multiple apps without needing to remember each password.\n \n \n \n \n How does single sign-on work? \n Single sign-on is a federated identity management arrangement. The use of such a system is sometimes called identity federation . Open Authorization ( OAuth ) is the framework that enables an end user's account information to be used by third-party services, such as Facebook, without exposing the user's password. \n OAuth acts as an intermediary on behalf of the end user by providing the service with an access token that authorizes specific account information to be shared. When a user attempts to access an application from the service provider, the service provider sends a request to the identity provider for authentication . The service provider then verifies the authentication and logs the user in. \n In a basic web SSO service, an agent module on the application server retrieves the specific authentication credentials for an individual user from a dedicated SSO policy server, while authenticating the user against a user repository, such as a Lightweight Directory Access Protocol directory. The service authenticates the end user for all the applications the user has been given rights to and eliminates future password prompts for individual applications during the same session. \n \n \n Types of SSO configurations \n Some SSO services use protocols, such as Kerberos or Security Assertion Markup Language ( SAML ): \n \n In a Kerberos-based setup, once user credentials are provided, a ticket-granting ticket (TGT) is issued. The TGT fetches service tickets for other applications the user wants to access, without asking the user to reenter credentials. \n SAML is an Extensible Markup Language standard that facilitates the exchange of user authentication and authorization data across secure domains. SAML-based SSO services involve communications among the user, an identity provider that maintains a user directory and a service provider. \n Smart card -based SSO asks an end user to use a card holding the sign-in credentials for the first login. Once the card is used, the user does not have to reenter usernames or passwords. SSO smart cards store either certificates or passwords. \n \n \n \n Social SSO \n Google, LinkedIn, Apple, Twitter and Facebook offer popular SSO services that enable end users to log in to third-party applications with their social media authentication credentials. \n Many security professionals recommend end users refrain from using social SSO services because, once attackers gain control of a user's SSO credentials, they can access all other applications that use the same credentials. \n \n \n Enterprise SSO \n Enterprise single sign-on (eSSO) software and services are password managers with client and server components that log a user on to target applications by replaying user credentials. These credentials are almost always a username and password. Target applications do not need to be modified to work with the eSSO system. \n \n \n SSO security risks \n Although single sign-on is a convenience to users, it presents risks to enterprise security. An attacker who gains control over a user's SSO credentials is granted access to every application the user has rights to, increasing the amount of potential damage. \n To avoid malicious access, SSO should be coupled with identity governance. Organizations can also use two-factor authentication ( 2FA ) or multifactor authentication with SSO to improve security. \n \n \n SSO advantages and disadvantages \n Advantages of SSO include the following: \n \n Users need to remember and manage fewer passwords and usernames for each application. \n The process of authenticating with applications is streamlined -- no need to reenter passwords. \n Successful phishing attacks are reduced. \n IT help desks see fewer complaints or tickets regarding passwords. \n \n Disadvantages of SSO include the following: \n \n It does not address certain levels of security each application sign-on might need. \n If availability is lost to apps that only allow SSO, users become locked out. \n If unauthorized users gain access, they could access more than one application. \n \n \n \n SSO vendors \n Multiple vendors offer SSO products, services and features. SSO vendors include the following: \n \n Rippling enables users to sign in to cloud applications from multiple devices. \n Avatier Identity Anywhere is SSO for Docker container-based platforms. \n OneLogin by One Identity is a cloud-based identity and access management platform that supports SSO. \n Okta is an enterprise tool with SSO functionality. \n \n Editor's note: This article was written by Taina Teravainen in 2020. TechTarget editors revised it in 2024 to improve the reader experience. \n \n \n \nThis was last updated in April 2024 \n \n \n \n \n \nContinue Reading About single sign-on (SSO)\n \n \n Cloud IAM challenges and how to address them \n \n \n Multi-cloud identity management tips and best practices \n \n \n What is SSO? | How single sign-on works -- Cloudflare \n \n \n Use these user authentication types to secure networks \n \n \n Top cloud IAM best practices to implement \n \n \n \n \n Dig Deeper on Identity and access management \n \n \n identity provider \n \n \n \n By: Ben Lutkevich \n \n \n \n Use these 6 user authentication types to secure networks \n \n \n \n By: Kyle Johnson \n \n \n \n logon (or login) \n \n \n \n By: Robert Sheldon \n \n \n \n Active Directory Federation Services (AD FS) \n \n \n \n By: Erica Mixon",
            "summary": "Single sign-on (SSO) is a session and user authentication service allowing users to access multiple applications with one set of login credentials (e.g., username and password).  It simplifies credential management for individuals and organizations.  SSO works through federated identity management, often using frameworks like OAuth, which provides access tokens to third-party services without exposing user passwords.  Common SSO configurations utilize protocols like Kerberos (using ticket-granting tickets) or SAML (exchanging authentication data across domains), and can also leverage smart cards.  Social media platforms like Google and Facebook also provide SSO services, though security professionals often advise against their use due to potential risks if accounts are compromised.\n",
            "image": "https://cdn.ttgtmedia.com/ITKE/images/logos/TTlogo-379x201.png",
            "favicon": "https://www.techtarget.com/favicon.ico",
            "categoryName": "Google",
            "categoryDescription": "General search results without domain restrictions",
            "evaluation": {
              "justification": "Relevant and recent (2024), explains SSO and its use of protocols like OAuth, Kerberos, and SAML.",
              "rating": 9
            }
          },
          {
            "id": "https://learn.microsoft.com/en-us/entra/identity/enterprise-apps/what-is-single-sign-on",
            "title": "What is single sign-on? - Microsoft Entra ID",
            "url": "https://learn.microsoft.com/en-us/entra/identity/enterprise-apps/what-is-single-sign-on",
            "publishedDate": "2023-10-30T00:00:00.000Z",
            "author": "omondiatieno",
            "text": "Skip to main content \n \n This browser is no longer supported. \n Upgrade to Microsoft Edge to take advantage of the latest features, security updates, and technical support. \n \n \n \n \n \n \n What is single sign-on in Microsoft Entra ID? \n Article 10/30/2023 \n \n \n \n In this article \n This article provides you with information about the single sign-on (SSO) options that are available to you. It also outlines an introduction to planning a single sign-on deployment when using Microsoft Entra ID. Single sign-on is an authentication method that allows users to sign in using one set of credentials to multiple independent software systems. Using SSO means a user doesn't have to sign in to every application they use. With SSO, users can access all needed applications without being required to authenticate using different credentials. For a brief introduction, see Microsoft Entra single sign-on . \n Many applications already exist in Microsoft Entra ID that you can use with SSO. You have several options for SSO depending on the needs of the application and how it's implemented. Take time to plan your SSO deployment before you create applications in Microsoft Entra ID. The management of applications can be made easier by using the My Apps portal. \n Single sign-on options \n Choosing an SSO method depends on how the application is configured for authentication. Cloud applications can use federation-based options, such as OpenID Connect, OAuth, and SAML. The application can also use password-based SSO, linked-based SSO, or SSO can be disabled. \n \n Federation - When you set up SSO to work between multiple identity providers, it's called federation. An SSO implementation based on federation protocols improves security, reliability, end-user experiences, and implementation. \n With federated single sign-on, Microsoft Entra authenticates the user to the application by using their Microsoft Entra account. This method is supported for SAML 2.0 , WS-Federation, or OpenID Connect applications. Federated SSO is the richest mode of SSO. Use federated SSO with Microsoft Entra ID when an application supports it, instead of password-based SSO and Active Directory Federation Services (AD FS). \n There are some scenarios where the SSO option isn't present for an enterprise application. If the application was registered using App registrations in the portal, then the single sign-on capability is configured to use OpenID Connect and OAuth by default. In this case, the single sign-on option doesn't appear in the navigation under enterprise applications. \n Single sign-on isn't available when an application is hosted in another tenant. Single sign-on is also not available if your account doesn't have the required permissions (Cloud Application Administrator, Application Administrator, or owner of the service principal). Permissions can also cause a scenario where you can open single sign-on but might not be able to save. \n \n \n Password - On-premises applications can use a password-based method for SSO. This choice works when applications are configured for Application Proxy. \n With password-based SSO, users sign in to the application with a username and password the first time they access it. After the first sign-on, Microsoft Entra ID provides the username and password to the application. Password-based SSO enables secure application password storage and replay using a web browser extension or mobile app. This option uses the existing sign-in process provided by the application, enables an administrator to manage the passwords, and doesn't require the user to know the password. For more information, see Add password-based single sign-on to an application . \n \n Linked - Linked sign-on can provide a consistent user experience while you migrate applications over a period of time. If you're migrating applications to Microsoft Entra ID, you can use linked-based SSO to quickly publish links to all the applications you intend to migrate. Users can find all the links in the My Apps or Microsoft 365 portals. \n After a user has authenticated with a linked application, an account needs to be created before the user is provided single sign-on access. Provisioning this account can either occur automatically, or it can occur manually by an administrator. You can't apply Conditional Access policies or multifactor authentication to a linked application because a linked application doesn't provide single sign-on capabilities through Microsoft Entra ID. When you configure a linked application, you're simply adding a link that appears for launching the application. For more information, see Add linked single sign-on to an application . \n \n Disabled - When SSO is disabled, it isn't available for the application. When single sign-on is disabled, users might need to authenticate twice. First, users authenticate to Microsoft Entra ID, and then they sign in to the application. \n Disable SSO when: \n \n You're not ready to integrate this application with Microsoft Entra single sign-on \n \n You're testing other aspects of the application \n \n An on-premises application doesn't require users to authenticate, but you want them to. With SSO disabled, the user needs to authenticate. \n If you configured the application for SP-initiated SAML-based SSO and you change the SSO mode to disabled, it doesn't stop users from signing in to the application outside the MyApps portal. To stop users from signing in from outside My apps portal, you need to disable the ability for users to sign in. \n \n \n \n \n Plan SSO deployment \n Web applications are hosted by various companies and made available as a service. Some popular examples of web applications include Microsoft 365, GitHub, and Salesforce. There are thousands of others. People access web applications using a web browser on their computer. Single sign-on makes it possible for people to navigate between the various web applications without having to sign in multiple times. For more information, see Plan a single sign-on deployment . \n How you implement SSO depends on where the application is hosted. Hosting matters because of the way network traffic is routed to access the application. Users don't need to use the Internet to access on-premises applications (hosted on a local network). If the application is hosted in the cloud, users need the Internet to use it. Cloud hosted applications are also called Software as a Service (SaaS) applications. \n For cloud applications, federation protocols are used. You can also use single sign-on for on-premises applications. You can use Application Proxy to configure access for your on-premises application. For more information, see Remote access to on-premises applications through Microsoft Entra application proxy . \n My Apps \n If you're a user of an application, you likely don't care much about SSO details. You just want to use the applications that make you productive without having to type your password so much. You can find and manage your applications at the My Apps portal. For more information, see Sign in and start apps from the My Apps portal . \n Next steps \n \n Plan for single sign-on deployment \n \n \n \n \n \n Feedback \n \n Feedback \n \n \n \n \n \n Coming soon: Throughout 2024 we will be phasing out GitHub Issues as the feedback mechanism for content and replacing it with a new feedback system. For more information see: https://aka.ms/ContentUserFeedback . \n Submit and view feedback for \n \n \n \n Additional resources \n \n In this article",
            "summary": "Single sign-on (SSO) lets users access multiple applications with one set of credentials, eliminating the need to log in separately to each.  Microsoft Entra ID offers several SSO options, including federation (using protocols like SAML 2.0, WS-Federation, or OpenID Connect) and password-based SSO (for on-premises apps using Application Proxy).  The best option depends on the application's configuration.  Federation is generally preferred for its enhanced security and user experience.\n",
            "image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
            "categoryName": "Google",
            "categoryDescription": "General search results without domain restrictions",
            "evaluation": {
              "justification": "Relevant and recent (2023), explains SSO and Microsoft Entra ID's options.",
              "rating": 9
            }
          },
          {
            "id": "https://auth0.com/docs/authenticate/single-sign-on",
            "title": "Single Sign-On - Auth0",
            "url": "https://auth0.com/docs/authenticate/single-sign-on",
            "publishedDate": "2024-02-07T00:16:37.000Z",
            "author": "Auth0",
            "text": "Single Sign-on (SSO) occurs when a user logs in to one application and is then signed in to other applications automatically, regardless of the platform, technology, or domain the user is using. The user signs in only one time, hence the name of the feature (Single Sign-on). For example, if you log in to a Google service such as Gmail, you are automatically authenticated to YouTube, AdSense, Google Analytics, and other Google apps. Likewise, if you log out of your Gmail or other Google apps, you are automatically logged out of all the apps; this is known as Single Logout. SSO provides a seamless experience for users when using your applications and services. Instead of having to remember separate sets of credentials for each application or service, users can simply log in once and access your full suite of applications. Whenever users go to a domain that requires authentication, they are redirected to the authentication domain where they may be asked to log in. If the user is already logged in at the authentication domain, they can be immediately redirected to the original domain without signing in again. How it works Single Sign-on and Single Logout are possible through the use of sessions . There may be up to three different sessions for a user with SSO: Local session maintained by the application Authorization Server session, if SSO is enabled Identity Provider (IdP) session, if the user chose to log in through an Identity Provider (such as Google, Facebook, or an enterprise SAML Identity Provider) With SSO, a central domain performs authentication and then shares the session with other domains. The way a session is shared may differ between SSO protocols, but the general concept is the same. For example, the authentication domain may generate a signed JSON Web Token (JWT) (encrypted using JSON Web Encryption (JWE)), which contains all the information needed to identify the user for any other domain requiring authentication. This token is passed to the client, but because it is signed, it cannot be modified in any way by the client. The token can be passed to the original domain by a redirect and used by the authentication domain and any other domains to identify the user. SSO with Universal Login The easiest and most secure way to implement Single Sign-on (SSO) with Auth0 is by using Universal Login for authentication. In fact, currently SSO is only possible with native platforms (like iOS or Android) if the application uses Universal Login . The Swift and Android quick starts provide some examples of using Universal Login. If you cannot use Universal Login with your application, review the following for additional info on embedded authentication: Lock Auth0.js SSO on first login For SSO with Auth0, the Central Service is the Auth0 Authorization Server . Let's look at an example of the SSO flow when a user logs in for the first time: Your application redirects the user to the login page. Auth0 checks to see whether there is an existing SSO cookie. Because this is the first time the user is visiting the login page and no SSO cookie is present, the user will be asked to log in using one of the connections you have configured. Once the user has logged in, Auth0 will set an SSO cookie and redirect the user to your application, returning an ID Token that contains identity information for the user. SSO on subsequent logins Let's look at an example of the SSO flow when a user returns to your website for a subsequent visit: Your application redirects the user to the login page. Auth0 checks to see whether there is an existing SSO cookie. Auth0 finds the SSO cookie, and if necessary, updates it. No login screen is shown. Auth0 redirects the user to your application, returning an ID Token that contains identity information for the user. Check user's SSO status You can check a user's SSO status from an application by calling the checkSession method of the auth0.js SDK, which will attempt to silently authenticate the user within an iframe. Whether the authentication is successful or not indicates whether the user has an active SSO cookie. Protocols SAML and WS-Federation Security Assertion Markup Language (SAML) and Web Services Federation ( WS-Fed ) are both protocols that are widely used in SSO implementations. Both SAML and WS-Fed exchange authorization and authentication data in XML format; the main parts of this exchange are the user, the identity provider, and the service provider. With SAML or WS-Fed: A user requests a resource from the service provider. The service provider checks with the identity provider to see if the user should have access to the resource. The identity provider verifies the user's identity, and if valid, asserts back to the service provider that the user should have access. OpenID Connect OpenID Connect (OIDC) is an authentication protocol commonly used in consumer-facing SSO implementations. The OIDC protocol handles authentication through JSON Web Tokens and a central identity provider. With OIDC: A user requests access to an application. The application redirects the user to the identity provider for authentication. The identity provider verifies the user, and if successful, prompts the user to grant data access to the application. If access is granted, the identity provider generates an ID Token, which contains user identity information that the application can consume. The identity provider returns the user to the application. AD/LDAP Lightweight Directory Access Protocol (LDAP) is an application protocol used to access a directory of credentials that can be shared by multiple applications; it is commonly used by intranets. When paired with Active Directory (AD), LDAP provides a centralized location for user identity, so the application makes an authentication request to the LDAP/AD server. The LDAP protocol exchanges information in LDAP Data Interchange Format (LDIF). Service-provider-initiated SSO For Service-Provider-initiated SSO , Auth0 is the SSO Service Provider (SP). When a user logs in to an application: The application presents the user with one or more external identity providers. The user selects an identity provider to authenticate with and logs in. Upon successful authentication, the user is returned to the application. SP-initiated SSO in Auth0 is handled by connections. Identity-provider-initiated SSO For Identity-Provider-initiated SSO , a third-party Identity Provider (IdP) is the SSO provider. When a user logs in to an application: The application redirects the user to an identity provider. The third-party identity provider performs authentication and authorization. Upon successful authentication, the user is returned to the application. When planning an IdP-initiated SSO implementation, you may choose to use Auth0's SSO Dashboard Extension , which allows you to create a dashboard that lists multiple enterprise applications that can be enabled for SSO. This dashboard is then presented to your users to log in. Use cases Business to Business For Business to Business (B2B) scenarios, SSO can simplify packaging your application for enterprise consumption. With Auth0, your applications can support common enterprise federation scenarios, such as Active Directory (AD), Lightweight Directory Access Protocol (LDAP), Ping, or Security Assertion Markup Language (SAML). This allows your partners and enterprise customers to log in with their preferred enterprise identity technologies. Case Study: O'Reilly Business to Consumer CIAM For Business to Consumer (B2C) or Customer Identity Access Management (CIAM) scenarios, SSO can provide frictionless access to your applications or services. You can let customers authenticate through popular social identity providers, such as Google, Facebook, LinkedIn, X, and Microsoft, instead of requiring them to make another account. Case Study: Giving Compass Learn more Service-Provider-Initiated Single Sign-On Identity-Provider-Initiated Single Sign-On API Endpoints for Single Sign-On Troubleshoot SAML Configurations Verify Connections",
            "summary": "Single Sign-On (SSO) lets users log in once to access multiple applications.  After authenticating with a central domain (e.g., Google), subsequent applications automatically grant access.  This is achieved through sessions managed by an authorization server, often using JSON Web Tokens (JWTs) to securely share user identity.  Auth0's Universal Login is the recommended method for implementing SSO, especially for native mobile apps.  For other applications, options like Lock and Auth0.js are available.  SSO also includes Single Logout, automatically signing users out of all connected applications upon logout from one.\n",
            "image": "https://cdn2.auth0.com/docs/1.13881.0/img/share-image.png",
            "favicon": "https://cdn.auth0.com/quantum-assets/dist/latest/favicons/auth0-favicon-onlight.png",
            "categoryName": "Google",
            "categoryDescription": "General search results without domain restrictions",
            "evaluation": {
              "justification": "Relevant and recent (2024), explains SSO and Auth0's implementation.",
              "rating": 9
            }
          },
          {
            "id": "https://aws.amazon.com/what-is/sso/",
            "title": "What is SSO (Single-Sign-On)? - AWS",
            "url": "https://aws.amazon.com/what-is/sso/",
            "publishedDate": "2025-02-13T02:29:06.000Z",
            "author": "",
            "text": "There are several identity and access management solutions you can choose from, depending on your requirements. \n Federated identity management \n Federated identity management (FIM) is a digital framework that allows multiple applications from different vendors to share, manage, and authenticate user identity. For example, FIM allows your workforce to login to one application and then access several other enterprise applications without logging in again. FIM authenticates the credential submitted from the service provider with a credible identity provider. \n SSO vs. federated identity management \n Federated identity management is a comprehensive identity authentication and management solution for cross-domain applications. Meanwhile, single sign-on (SSO) is a specific functionality within the FIM model. While FIM allows users to access services from different vendors with a single login, SSO is limited to services or applications hosted by a single vendor. \n Same sign-on \n Same sign-on, which also bears the SSO acronym, is a digital solution that stores and synchronizes user credentials on devices accessed by the user. It is similar to password vaults or password managers that allow users to sign in to multiple apps on different devices without remembering the credentials. \n Single sign-on vs. same sign-on \n Single sign-on systems require a one-time authentication from the user. Once logged in, the user can access other web applications and services without re-authenticating themselves. Meanwhile, same sign-on requires the user to repeat the login process each time with the same authentication credentials. \n Multi-factor authentication \n Multi-factor authentication is a user authentication framework using two or more technologies to verify the user’s identity. For example, users enter their email address and password on a webpage and key in a one-time password (OTP) sent to their mobile phone to enable secure access. \n SSO vs. multi-factor authentication \n SSO enables organizations to simplify and strengthen password security by allowing access to all connected services with a single login. Multi-factor authentication provides additional security layers to reduce the possibility of unauthorized access through stolen credentials. Both SSO and multi-factor authentication can be integrated to improve the security posture of web applications.",
            "summary": "Single sign-on (SSO) is a functionality within federated identity management (FIM) that allows users to access multiple applications with one login.  It differs from same sign-on, which requires repeated logins with the same credentials.  Unlike FIM, which spans multiple vendors, SSO typically applies to applications from a single vendor.  SSO improves security by simplifying password management but can be further enhanced by integrating multi-factor authentication.\n",
            "image": "https://a0.awsstatic.com/libra-css/images/logos/aws_logo_smile_1200x630.png",
            "favicon": "https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico",
            "categoryName": "Google",
            "categoryDescription": "General search results without domain restrictions",
            "evaluation": {
              "justification": "Relevant and recent (2025), explains SSO and its relation to FIM.",
              "rating": 9
            }
          }
        ]
      }
    ],
    "totalResults": 23,
    "evaluationSummary": {
      "totalEvaluated": 36,
      "included": 23,
      "excluded": 13
    }
  }
}