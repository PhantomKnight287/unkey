name: Deploy
on:
  push:
    branches: [main]

concurrency:
  group: deploy
  cancel-in-progress: false

jobs:
  # Detect changes to optimize deployment pipeline
  detect_changes:
    uses: ./.github/workflows/job_detect_changes.yaml

  # Warm up caches early to avoid rate limits
  cache_dependencies:
    uses: ./.github/workflows/job_cache_deps.yaml
    with:
      cache-key-suffix: "deploy-${{ github.sha }}"

  # Test jobs with improved caching
  agent_local_test:
    needs: [cache_dependencies]
    uses: ./.github/workflows/test_agent_local.yaml

  api_local_test:
    name: Test API
    needs: [cache_dependencies]
    uses: ./.github/workflows/job_test_api_local.yaml

  # Build agent image only if agent changes detected
  build_agent_image:
    needs: [detect_changes, cache_dependencies]
    if: needs.detect_changes.outputs.agent == 'true'
    uses: ./.github/workflows/job_build_agent_image.yaml
    secrets:
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}

  # Sequential deployment pipeline
  api_preview_deployment:
    needs: [detect_changes, api_local_test]
    if: needs.detect_changes.outputs.api == 'true'
    uses: ./.github/workflows/job_deploy_api_staging.yaml
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  api_preview_test:
    needs: [api_preview_deployment]
    if: needs.api_preview_deployment.result == 'success'
    uses: ./.github/workflows/job_test_api_staging.yaml
    with:
      UNKEY_BASE_URL: https://preview-api.unkey.dev
    secrets:
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      CLICKHOUSE_URL: ${{ secrets.CLICKHOUSE_URL }}

  api_canary_deployment:
    needs: [detect_changes, api_local_test, api_preview_test]
    if: needs.detect_changes.outputs.api == 'true' && needs.api_preview_test.result == 'success'
    uses: ./.github/workflows/job_deploy_api_canary.yaml
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  api_canary_test:
    needs: [api_canary_deployment]
    if: needs.api_canary_deployment.result == 'success'
    uses: ./.github/workflows/job_test_api_canary.yaml
    with:
      UNKEY_BASE_URL: https://canary.unkey.dev
    secrets:
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      CLICKHOUSE_URL: ${{ secrets.CLICKHOUSE_URL }}

  # api_canary_benchmark:
  #   if: ${{false}}
  #   environment: Canary
  #   needs:
  #     - api_canary_deployment
  #     - agent_production_deployment
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       region: [
  #           "us-east-1",
  #           "us-east-2",
  #           "us-west-1",
  #           "us-west-2",
  #           "ap-south-2",
  #           "ap-southeast-3",
  #           "ap-southeast-4",
  #           "ap-south-1",
  #           "ap-northeast-3",
  #           "ap-northeast-2",
  #           "ap-southeast-1",
  #           "ap-southeast-2", # sydney
  #           "ca-central-1", # Canada
  #           "eu-central-1", # Frankfurt
  #           "eu-west-2", # London
  #           "sa-east-1", # Sao Paulo,
  #         ]
  #   name: Artillery in ${{ matrix.region }}

  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Prepare
  #       shell: bash
  #       run: |
  #         cat <<EOF > .keys.csv
  #         ${{ secrets.ARTILLERY_KEYS_CSV }}
  #         EOF
  #       working-directory: tools/artillery

  #     - name: Run
  #       run: npx artillery@latest run-lambda --record --key=${{ secrets.ARTILLERY_CLOUD_KEY }} --region ${{ matrix.region }} --count=5 --target=https://canary.unkey.dev  ./keys.verifyKey.yaml
  #       working-directory: tools/artillery
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  api_production_deployment:
    needs: [detect_changes, api_canary_test]
    if: needs.detect_changes.outputs.api == 'true' && needs.api_canary_test.result == 'success'
    uses: ./.github/workflows/job_deploy_api_production.yaml
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  # Parallel post-deployment jobs
  mintlify_deployment:
    needs: [api_production_deployment]
    if: needs.api_production_deployment.result == 'success'
    runs-on: ubuntu-latest
    name: Deploy docs
    steps:
      - uses: actions/checkout@v4

      - name: Redeploy
        run: |
          curl --request POST \
          --url https://api.mintlify.com/v1/project/update/648b83e0e20b94f5a3e41a70 \
          --header 'Authorization: Bearer ${{secrets.MINTLIFY_API_KEY}}'

  logdrain_production_deployment:
    needs: [api_production_deployment]
    if: needs.api_production_deployment.result == 'success'
    uses: ./.github/workflows/job_deploy_logdrain_production.yaml
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  workflows_deployment:
    needs: [detect_changes, api_local_test]
    if: needs.detect_changes.outputs.api == 'true'
    uses: ./.github/workflows/job_deploy_workflows.yaml
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-enterprise-worker:
    needs: [api_production_deployment]
    if: needs.api_production_deployment.result == 'success'
    uses: ./.github/workflows/job_deploy_api_enterprise.yaml
    secrets:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  # ClickHouse migrations with proper dependencies
  clickhouse_migration_preview:
    if: needs.detect_changes.outputs.clickhouse == 'true'
    needs: [detect_changes, api_local_test]
    uses: ./.github/workflows/job_clickhouse_migration_preview.yaml
    secrets:
      CLICKHOUSE_URL: ${{ secrets.CLICKHOUSE_URL }}

  clickhouse_migration_production:
    if: needs.detect_changes.outputs.clickhouse == 'true'
    needs: [detect_changes, api_preview_test, clickhouse_migration_preview]
    uses: ./.github/workflows/job_clickhouse_migration_production.yaml
    secrets:
      CLICKHOUSE_URL: ${{ secrets.CLICKHOUSE_URL }}

  # Final deployment status
  deployment_status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs:
      [
        detect_changes,
        cache_dependencies,
        agent_local_test,
        api_local_test,
        build_agent_image,
        api_preview_deployment,
        api_preview_test,
        api_canary_deployment,
        api_canary_test,
        api_production_deployment,
        mintlify_deployment,
        logdrain_production_deployment,
        workflows_deployment,
        deploy-enterprise-worker,
        clickhouse_migration_preview,
        clickhouse_migration_production,
      ]
    if: always()
    steps:
      - name: Report deployment status
        run: |
          echo "Deployment completed with the following results:"
          echo "- Change detection: ${{ needs.detect_changes.result }}"
          echo "- Cache dependencies: ${{ needs.cache_dependencies.result }}"
          echo "- Agent local test: ${{ needs.agent_local_test.result }}"
          echo "- API local test: ${{ needs.api_local_test.result }}"
          echo "- Build agent image: ${{ needs.build_agent_image.result }}"
          echo "- API preview deployment: ${{ needs.api_preview_deployment.result }}"
          echo "- API preview test: ${{ needs.api_preview_test.result }}"
          echo "- API canary deployment: ${{ needs.api_canary_deployment.result }}"
          echo "- API canary test: ${{ needs.api_canary_test.result }}"
          echo "- API production deployment: ${{ needs.api_production_deployment.result }}"
          echo "- Mintlify deployment: ${{ needs.mintlify_deployment.result }}"
          echo "- Logdrain production deployment: ${{ needs.logdrain_production_deployment.result }}"
          echo "- Workflows deployment: ${{ needs.workflows_deployment.result }}"
          echo "- Enterprise worker deployment: ${{ needs.deploy-enterprise-worker.result }}"
          echo "- ClickHouse migration preview: ${{ needs.clickhouse_migration_preview.result }}"
          echo "- ClickHouse migration production: ${{ needs.clickhouse_migration_production.result }}"

          # Check for any critical failures
          if [[ "${{ needs.cache_dependencies.result }}" == "failure" ]] || \
             [[ "${{ needs.agent_local_test.result }}" == "failure" ]] || \
             [[ "${{ needs.api_local_test.result }}" == "failure" ]]; then
            echo "❌ Deployment failed due to critical test failures"
            exit 1
          else
            echo "✅ Deployment pipeline completed"
          fi
