// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: keyring_find_outdated_counts.sql

package db

import (
	"context"
)

const getOutdatedKeySpaces = `-- name: GetOutdatedKeySpaces :many
SELECT
  ka.id, ka.workspace_id, ka.created_at_m, ka.updated_at_m, ka.deleted_at_m, ka.store_encrypted_keys, ka.default_prefix, ka.default_bytes, ka.size_approx, ka.size_last_updated_at
FROM key_auth ka
WHERE
  ka.deleted_at_m IS NULL
  AND (
    ka.size_last_updated_at IS NULL
    OR ka.size_last_updated_at < ?
  )
ORDER BY ka.size_last_updated_at ASC
LIMIT 10000
`

type GetOutdatedKeySpacesRow struct {
	KeyAuth KeyAuth `db:"key_auth"`
}

// GetOutdatedKeySpaces
//
//	SELECT
//	  ka.id, ka.workspace_id, ka.created_at_m, ka.updated_at_m, ka.deleted_at_m, ka.store_encrypted_keys, ka.default_prefix, ka.default_bytes, ka.size_approx, ka.size_last_updated_at
//	FROM key_auth ka
//	WHERE
//	  ka.deleted_at_m IS NULL
//	  AND (
//	    ka.size_last_updated_at IS NULL
//	    OR ka.size_last_updated_at < ?
//	  )
//	ORDER BY ka.size_last_updated_at ASC
//	LIMIT 10000
func (q *Queries) GetOutdatedKeySpaces(ctx context.Context, db DBTX, cutoffTime int64) ([]GetOutdatedKeySpacesRow, error) {
	rows, err := db.QueryContext(ctx, getOutdatedKeySpaces, cutoffTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOutdatedKeySpacesRow
	for rows.Next() {
		var i GetOutdatedKeySpacesRow
		if err := rows.Scan(
			&i.KeyAuth.ID,
			&i.KeyAuth.WorkspaceID,
			&i.KeyAuth.CreatedAtM,
			&i.KeyAuth.UpdatedAtM,
			&i.KeyAuth.DeletedAtM,
			&i.KeyAuth.StoreEncryptedKeys,
			&i.KeyAuth.DefaultPrefix,
			&i.KeyAuth.DefaultBytes,
			&i.KeyAuth.SizeApprox,
			&i.KeyAuth.SizeLastUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
