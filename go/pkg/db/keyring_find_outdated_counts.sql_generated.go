// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: keyring_find_outdated_counts.sql

package db

import (
	"context"
)

const getOutdatedKeySpaces = `-- name: GetOutdatedKeySpaces :many
SELECT
  id,
  workspace_id
FROM key_auth
WHERE
  deleted_at_m IS NULL
  AND id > ?
  AND (
    size_last_updated_at IS NULL
    OR size_last_updated_at < ?
  )
ORDER BY id ASC
LIMIT 1000
`

type GetOutdatedKeySpacesParams struct {
	IDCursor   string `db:"id_cursor"`
	CutoffTime int64  `db:"cutoff_time"`
}

type GetOutdatedKeySpacesRow struct {
	ID          string `db:"id"`
	WorkspaceID string `db:"workspace_id"`
}

// GetOutdatedKeySpaces
//
//	SELECT
//	  id,
//	  workspace_id
//	FROM key_auth
//	WHERE
//	  deleted_at_m IS NULL
//	  AND id > ?
//	  AND (
//	    size_last_updated_at IS NULL
//	    OR size_last_updated_at < ?
//	  )
//	ORDER BY id ASC
//	LIMIT 1000
func (q *Queries) GetOutdatedKeySpaces(ctx context.Context, db DBTX, arg GetOutdatedKeySpacesParams) ([]GetOutdatedKeySpacesRow, error) {
	rows, err := db.QueryContext(ctx, getOutdatedKeySpaces, arg.IDCursor, arg.CutoffTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOutdatedKeySpacesRow
	for rows.Next() {
		var i GetOutdatedKeySpacesRow
		if err := rows.Scan(&i.ID, &i.WorkspaceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
