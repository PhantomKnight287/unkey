// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: key_find_for_credit_refills.sql

package db

import (
	"context"
	"database/sql"
)

const findKeysForRefill = `-- name: FindKeysForRefill :many
SELECT
  id, key_auth_id, hash, start, workspace_id, for_workspace_id, name, owner_id, identity_id, meta, expires, created_at_m, updated_at_m, deleted_at_m, refill_day, refill_amount, last_refill_at, enabled, remaining_requests, ratelimit_async, ratelimit_limit, ratelimit_duration, environment
FROM ` + "`" + `keys` + "`" + `
WHERE
  deleted_at_m IS NULL
  AND refill_amount IS NOT NULL
  AND refill_amount > remaining_requests
  AND (
    last_refill_at < ?
    OR last_refill_at IS NULL
  )
  AND CASE
    WHEN ? THEN
      -- If today is last day of month, include keys with refill_day > today OR regular refill condition
      (refill_day > ? OR refill_day IS NULL OR refill_day = ?)
    ELSE
      -- Otherwise, only include keys matching regular refill condition
      (refill_day IS NULL OR refill_day = ?)
    END
`

type FindKeysForRefillParams struct {
	Cutoff           sql.NullTime  `db:"cutoff"`
	IsLastDayOfMonth interface{}   `db:"is_last_day_of_month"`
	Today            sql.NullInt16 `db:"today"`
}

// FindKeysForRefill
//
//	SELECT
//	  id, key_auth_id, hash, start, workspace_id, for_workspace_id, name, owner_id, identity_id, meta, expires, created_at_m, updated_at_m, deleted_at_m, refill_day, refill_amount, last_refill_at, enabled, remaining_requests, ratelimit_async, ratelimit_limit, ratelimit_duration, environment
//	FROM `keys`
//	WHERE
//	  deleted_at_m IS NULL
//	  AND refill_amount IS NOT NULL
//	  AND refill_amount > remaining_requests
//	  AND (
//	    last_refill_at < ?
//	    OR last_refill_at IS NULL
//	  )
//	  AND CASE
//	    WHEN ? THEN
//	      -- If today is last day of month, include keys with refill_day > today OR regular refill condition
//	      (refill_day > ? OR refill_day IS NULL OR refill_day = ?)
//	    ELSE
//	      -- Otherwise, only include keys matching regular refill condition
//	      (refill_day IS NULL OR refill_day = ?)
//	    END
func (q *Queries) FindKeysForRefill(ctx context.Context, db DBTX, arg FindKeysForRefillParams) ([]Key, error) {
	rows, err := db.QueryContext(ctx, findKeysForRefill,
		arg.Cutoff,
		arg.IsLastDayOfMonth,
		arg.Today,
		arg.Today,
		arg.Today,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Key
	for rows.Next() {
		var i Key
		if err := rows.Scan(
			&i.ID,
			&i.KeyAuthID,
			&i.Hash,
			&i.Start,
			&i.WorkspaceID,
			&i.ForWorkspaceID,
			&i.Name,
			&i.OwnerID,
			&i.IdentityID,
			&i.Meta,
			&i.Expires,
			&i.CreatedAtM,
			&i.UpdatedAtM,
			&i.DeletedAtM,
			&i.RefillDay,
			&i.RefillAmount,
			&i.LastRefillAt,
			&i.Enabled,
			&i.RemainingRequests,
			&i.RatelimitAsync,
			&i.RatelimitLimit,
			&i.RatelimitDuration,
			&i.Environment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
