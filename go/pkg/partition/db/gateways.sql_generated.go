// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gateways.sql

package db

import (
	"context"
)

const deleteGatewayConfig = `-- name: DeleteGatewayConfig :exec
DELETE FROM gateways
WHERE hostname = ?
`

// DeleteGatewayConfig
//
//	DELETE FROM gateways
//	WHERE hostname = ?
func (q *Queries) DeleteGatewayConfig(ctx context.Context, db DBTX, hostname string) error {
	_, err := db.ExecContext(ctx, deleteGatewayConfig, hostname)
	return err
}

const getGatewayConfig = `-- name: GetGatewayConfig :one
SELECT hostname, gateway_config
FROM gateways
WHERE hostname = ?
`

// GetGatewayConfig
//
//	SELECT hostname, gateway_config
//	FROM gateways
//	WHERE hostname = ?
func (q *Queries) GetGatewayConfig(ctx context.Context, db DBTX, hostname string) (Gateway, error) {
	row := db.QueryRowContext(ctx, getGatewayConfig, hostname)
	var i Gateway
	err := row.Scan(&i.Hostname, &i.GatewayConfig)
	return i, err
}

const upsertGatewayConfig = `-- name: UpsertGatewayConfig :exec
INSERT INTO gateways (hostname, gateway_config)
VALUES (?, ?)
ON DUPLICATE KEY UPDATE
    gateway_config = VALUES(gateway_config)
`

type UpsertGatewayConfigParams struct {
	Hostname      string `db:"hostname"`
	GatewayConfig []byte `db:"gateway_config"`
}

// UpsertGatewayConfig
//
//	INSERT INTO gateways (hostname, gateway_config)
//	VALUES (?, ?)
//	ON DUPLICATE KEY UPDATE
//	    gateway_config = VALUES(gateway_config)
func (q *Queries) UpsertGatewayConfig(ctx context.Context, db DBTX, arg UpsertGatewayConfigParams) error {
	_, err := db.ExecContext(ctx, upsertGatewayConfig, arg.Hostname, arg.GatewayConfig)
	return err
}
